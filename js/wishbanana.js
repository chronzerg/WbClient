var requirejs,require,define;!function(global){function commentReplace(e,t,n,i){return i||""}function isFunction(e){return"[object Function]"===ostring.call(e)}function isArray(e){return"[object Array]"===ostring.call(e)}function each(e,t){if(e){var n;for(n=0;n<e.length&&(!e[n]||!t(e[n],n,e));n+=1);}}function eachReverse(e,t){if(e){var n;for(n=e.length-1;n>-1&&(!e[n]||!t(e[n],n,e));n-=1);}}function hasProp(e,t){return hasOwn.call(e,t)}function getOwn(e,t){return hasProp(e,t)&&e[t]}function eachProp(e,t){var n;for(n in e)if(hasProp(e,n)&&t(e[n],n))break}function mixin(e,t,n,i){return t&&eachProp(t,function(t,r){(n||!hasProp(e,r))&&(!i||"object"!=typeof t||!t||isArray(t)||isFunction(t)||t instanceof RegExp?e[r]=t:(e[r]||(e[r]={}),mixin(e[r],t,n,i)))}),e}function bind(e,t){return function(){return t.apply(e,arguments)}}function scripts(){return document.getElementsByTagName("script")}function defaultOnError(e){throw e}function getGlobal(e){if(!e)return e;var t=global;return each(e.split("."),function(e){t=t[e]}),t}function makeError(e,t,n,i){var r=new Error(t+"\nhttp://requirejs.org/docs/errors.html#"+e);return r.requireType=e,r.requireModules=i,n&&(r.originalError=n),r}function newContext(e){function t(e){var t,n;for(t=0;t<e.length;t++)if(n=e[t],"."===n)e.splice(t,1),t-=1;else if(".."===n){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}function n(e,n,i){var r,o,s,a,u,c,l,d,f,h,p,m,g=n&&n.split("/"),v=S.map,y=v&&v["*"];if(e&&(e=e.split("/"),l=e.length-1,S.nodeIdCompat&&jsSuffixRegExp.test(e[l])&&(e[l]=e[l].replace(jsSuffixRegExp,"")),"."===e[0].charAt(0)&&g&&(m=g.slice(0,g.length-1),e=m.concat(e)),t(e),e=e.join("/")),i&&v&&(g||y)){s=e.split("/");e:for(a=s.length;a>0;a-=1){if(c=s.slice(0,a).join("/"),g)for(u=g.length;u>0;u-=1)if(o=getOwn(v,g.slice(0,u).join("/")),o&&(o=getOwn(o,c))){d=o,f=a;break e}!h&&y&&getOwn(y,c)&&(h=getOwn(y,c),p=a)}!d&&h&&(d=h,f=p),d&&(s.splice(0,f,d),e=s.join("/"))}return r=getOwn(S.pkgs,e),r?r:e}function i(e){isBrowser&&each(scripts(),function(t){return t.getAttribute("data-requiremodule")===e&&t.getAttribute("data-requirecontext")===b.contextName?(t.parentNode.removeChild(t),!0):void 0})}function r(e){var t=getOwn(S.paths,e);return t&&isArray(t)&&t.length>1?(t.shift(),b.require.undef(e),b.makeRequire(null,{skipMap:!0})([e]),!0):void 0}function o(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function s(e,t,i,r){var s,a,u,c,l=null,d=t?t.name:null,f=e,h=!0,p="";return e||(h=!1,e="_@r"+(O+=1)),c=o(e),l=c[0],e=c[1],l&&(l=n(l,d,r),a=getOwn(M,l)),e&&(l?p=a&&a.normalize?a.normalize(e,function(e){return n(e,d,r)}):-1===e.indexOf("!")?n(e,d,r):e:(p=n(e,d,r),c=o(p),l=c[0],p=c[1],i=!0,s=b.nameToUrl(p))),u=!l||a||i?"":"_unnormalized"+(A+=1),{prefix:l,name:p,parentMap:t,unnormalized:!!u,url:s,originalName:f,isDefine:h,id:(l?l+"!"+p:p)+u}}function a(e){var t=e.id,n=getOwn(k,t);return n||(n=k[t]=new b.Module(e)),n}function u(e,t,n){var i=e.id,r=getOwn(k,i);!hasProp(M,i)||r&&!r.defineEmitComplete?(r=a(e),r.error&&"error"===t?n(r.error):r.on(t,n)):"defined"===t&&n(M[i])}function c(e,t){var n=e.requireModules,i=!1;t?t(e):(each(n,function(t){var n=getOwn(k,t);n&&(n.error=e,n.events.error&&(i=!0,n.emit("error",e)))}),i||req.onError(e))}function l(){globalDefQueue.length&&(each(globalDefQueue,function(e){var t=e[0];"string"==typeof t&&(b.defQueueMap[t]=!0),D.push(e)}),globalDefQueue=[])}function d(e){delete k[e],delete T[e]}function f(e,t,n){var i=e.map.id;e.error?e.emit("error",e.error):(t[i]=!0,each(e.depMaps,function(i,r){var o=i.id,s=getOwn(k,o);!s||e.depMatched[r]||n[o]||(getOwn(t,o)?(e.defineDep(r,M[o]),e.check()):f(s,t,n))}),n[i]=!0)}function h(){var e,t,n=1e3*S.waitSeconds,o=n&&b.startTime+n<(new Date).getTime(),s=[],a=[],u=!1,l=!0;if(!y){if(y=!0,eachProp(T,function(e){var n=e.map,c=n.id;if(e.enabled&&(n.isDefine||a.push(e),!e.error))if(!e.inited&&o)r(c)?(t=!0,u=!0):(s.push(c),i(c));else if(!e.inited&&e.fetched&&n.isDefine&&(u=!0,!n.prefix))return l=!1}),o&&s.length)return e=makeError("timeout","Load timeout for modules: "+s,null,s),e.contextName=b.contextName,c(e);l&&each(a,function(e){f(e,{},{})}),o&&!t||!u||!isBrowser&&!isWebWorker||_||(_=setTimeout(function(){_=0,h()},50)),y=!1}}function p(e){hasProp(M,e[0])||a(s(e[0],null,!0)).init(e[1],e[2])}function m(e,t,n,i){e.detachEvent&&!isOpera?i&&e.detachEvent(i,t):e.removeEventListener(n,t,!1)}function g(e){var t=e.currentTarget||e.srcElement;return m(t,b.onScriptLoad,"load","onreadystatechange"),m(t,b.onScriptError,"error"),{node:t,id:t&&t.getAttribute("data-requiremodule")}}function v(){var e;for(l();D.length;){if(e=D.shift(),null===e[0])return c(makeError("mismatch","Mismatched anonymous define() module: "+e[e.length-1]));p(e)}b.defQueueMap={}}var y,x,b,w,_,S={waitSeconds:7,baseUrl:"./",paths:{},bundles:{},pkgs:{},shim:{},config:{}},k={},T={},C={},D=[],M={},E={},N={},O=1,A=1;return w={require:function(e){return e.require?e.require:e.require=b.makeRequire(e.map)},exports:function(e){return e.usingExports=!0,e.map.isDefine?e.exports?M[e.map.id]=e.exports:e.exports=M[e.map.id]={}:void 0},module:function(e){return e.module?e.module:e.module={id:e.map.id,uri:e.map.url,config:function(){return getOwn(S.config,e.map.id)||{}},exports:e.exports||(e.exports={})}}},x=function(e){this.events=getOwn(C,e.id)||{},this.map=e,this.shim=getOwn(S.shim,e.id),this.depExports=[],this.depMaps=[],this.depMatched=[],this.pluginMaps={},this.depCount=0},x.prototype={init:function(e,t,n,i){i=i||{},this.inited||(this.factory=t,n?this.on("error",n):this.events.error&&(n=bind(this,function(e){this.emit("error",e)})),this.depMaps=e&&e.slice(0),this.errback=n,this.inited=!0,this.ignore=i.ignore,i.enabled||this.enabled?this.enable():this.check())},defineDep:function(e,t){this.depMatched[e]||(this.depMatched[e]=!0,this.depCount-=1,this.depExports[e]=t)},fetch:function(){if(!this.fetched){this.fetched=!0,b.startTime=(new Date).getTime();var e=this.map;return this.shim?void b.makeRequire(this.map,{enableBuildCallback:!0})(this.shim.deps||[],bind(this,function(){return e.prefix?this.callPlugin():this.load()})):e.prefix?this.callPlugin():this.load()}},load:function(){var e=this.map.url;E[e]||(E[e]=!0,b.load(this.map.id,e))},check:function(){if(this.enabled&&!this.enabling){var e,t,n=this.map.id,i=this.depExports,r=this.exports,o=this.factory;if(this.inited){if(this.error)this.emit("error",this.error);else if(!this.defining){if(this.defining=!0,this.depCount<1&&!this.defined){if(isFunction(o)){if(this.events.error&&this.map.isDefine||req.onError!==defaultOnError)try{r=b.execCb(n,o,i,r)}catch(s){e=s}else r=b.execCb(n,o,i,r);if(this.map.isDefine&&void 0===r&&(t=this.module,t?r=t.exports:this.usingExports&&(r=this.exports)),e)return e.requireMap=this.map,e.requireModules=this.map.isDefine?[this.map.id]:null,e.requireType=this.map.isDefine?"define":"require",c(this.error=e)}else r=o;if(this.exports=r,this.map.isDefine&&!this.ignore&&(M[n]=r,req.onResourceLoad)){var a=[];each(this.depMaps,function(e){a.push(e.normalizedMap||e)}),req.onResourceLoad(b,this.map,a)}d(n),this.defined=!0}this.defining=!1,this.defined&&!this.defineEmitted&&(this.defineEmitted=!0,this.emit("defined",this.exports),this.defineEmitComplete=!0)}}else hasProp(b.defQueueMap,n)||this.fetch()}},callPlugin:function(){var e=this.map,t=e.id,i=s(e.prefix);this.depMaps.push(i),u(i,"defined",bind(this,function(i){var r,o,l,f=getOwn(N,this.map.id),h=this.map.name,p=this.map.parentMap?this.map.parentMap.name:null,m=b.makeRequire(e.parentMap,{enableBuildCallback:!0});return this.map.unnormalized?(i.normalize&&(h=i.normalize(h,function(e){return n(e,p,!0)})||""),o=s(e.prefix+"!"+h,this.map.parentMap),u(o,"defined",bind(this,function(e){this.map.normalizedMap=o,this.init([],function(){return e},null,{enabled:!0,ignore:!0})})),l=getOwn(k,o.id),void(l&&(this.depMaps.push(o),this.events.error&&l.on("error",bind(this,function(e){this.emit("error",e)})),l.enable()))):f?(this.map.url=b.nameToUrl(f),void this.load()):(r=bind(this,function(e){this.init([],function(){return e},null,{enabled:!0})}),r.error=bind(this,function(e){this.inited=!0,this.error=e,e.requireModules=[t],eachProp(k,function(e){0===e.map.id.indexOf(t+"_unnormalized")&&d(e.map.id)}),c(e)}),r.fromText=bind(this,function(n,i){var o=e.name,u=s(o),l=useInteractive;i&&(n=i),l&&(useInteractive=!1),a(u),hasProp(S.config,t)&&(S.config[o]=S.config[t]);try{req.exec(n)}catch(d){return c(makeError("fromtexteval","fromText eval for "+t+" failed: "+d,d,[t]))}l&&(useInteractive=!0),this.depMaps.push(u),b.completeLoad(o),m([o],r)}),void i.load(e.name,m,r,S))})),b.enable(i,this),this.pluginMaps[i.id]=i},enable:function(){T[this.map.id]=this,this.enabled=!0,this.enabling=!0,each(this.depMaps,bind(this,function(e,t){var n,i,r;if("string"==typeof e){if(e=s(e,this.map.isDefine?this.map:this.map.parentMap,!1,!this.skipMap),this.depMaps[t]=e,r=getOwn(w,e.id))return void(this.depExports[t]=r(this));this.depCount+=1,u(e,"defined",bind(this,function(e){this.undefed||(this.defineDep(t,e),this.check())})),this.errback?u(e,"error",bind(this,this.errback)):this.events.error&&u(e,"error",bind(this,function(e){this.emit("error",e)}))}n=e.id,i=k[n],hasProp(w,n)||!i||i.enabled||b.enable(e,this)})),eachProp(this.pluginMaps,bind(this,function(e){var t=getOwn(k,e.id);t&&!t.enabled&&b.enable(e,this)})),this.enabling=!1,this.check()},on:function(e,t){var n=this.events[e];n||(n=this.events[e]=[]),n.push(t)},emit:function(e,t){each(this.events[e],function(e){e(t)}),"error"===e&&delete this.events[e]}},b={config:S,contextName:e,registry:k,defined:M,urlFetched:E,defQueue:D,defQueueMap:{},Module:x,makeModuleMap:s,nextTick:req.nextTick,onError:c,configure:function(e){if(e.baseUrl&&"/"!==e.baseUrl.charAt(e.baseUrl.length-1)&&(e.baseUrl+="/"),"string"==typeof e.urlArgs){var t=e.urlArgs;e.urlArgs=function(e,n){return(-1===n.indexOf("?")?"?":"&")+t}}var n=S.shim,i={paths:!0,bundles:!0,config:!0,map:!0};eachProp(e,function(e,t){i[t]?(S[t]||(S[t]={}),mixin(S[t],e,!0,!0)):S[t]=e}),e.bundles&&eachProp(e.bundles,function(e,t){each(e,function(e){e!==t&&(N[e]=t)})}),e.shim&&(eachProp(e.shim,function(e,t){isArray(e)&&(e={deps:e}),!e.exports&&!e.init||e.exportsFn||(e.exportsFn=b.makeShimExports(e)),n[t]=e}),S.shim=n),e.packages&&each(e.packages,function(e){var t,n;e="string"==typeof e?{name:e}:e,n=e.name,t=e.location,t&&(S.paths[n]=e.location),S.pkgs[n]=e.name+"/"+(e.main||"main").replace(currDirRegExp,"").replace(jsSuffixRegExp,"")}),eachProp(k,function(e,t){e.inited||e.map.unnormalized||(e.map=s(t,null,!0))}),(e.deps||e.callback)&&b.require(e.deps||[],e.callback)},makeShimExports:function(e){function t(){var t;return e.init&&(t=e.init.apply(global,arguments)),t||e.exports&&getGlobal(e.exports)}return t},makeRequire:function(t,r){function o(n,i,u){var l,d,f;return r.enableBuildCallback&&i&&isFunction(i)&&(i.__requireJsBuild=!0),"string"==typeof n?isFunction(i)?c(makeError("requireargs","Invalid require call"),u):t&&hasProp(w,n)?w[n](k[t.id]):req.get?req.get(b,n,t,o):(d=s(n,t,!1,!0),l=d.id,hasProp(M,l)?M[l]:c(makeError("notloaded",'Module name "'+l+'" has not been loaded yet for context: '+e+(t?"":". Use require([])")))):(v(),b.nextTick(function(){v(),f=a(s(null,t)),f.skipMap=r.skipMap,f.init(n,i,u,{enabled:!0}),h()}),o)}return r=r||{},mixin(o,{isBrowser:isBrowser,toUrl:function(e){var i,r=e.lastIndexOf("."),o=e.split("/")[0],s="."===o||".."===o;return-1!==r&&(!s||r>1)&&(i=e.substring(r,e.length),e=e.substring(0,r)),b.nameToUrl(n(e,t&&t.id,!0),i,!0)},defined:function(e){return hasProp(M,s(e,t,!1,!0).id)},specified:function(e){return e=s(e,t,!1,!0).id,hasProp(M,e)||hasProp(k,e)}}),t||(o.undef=function(e){l();var n=s(e,t,!0),r=getOwn(k,e);r.undefed=!0,i(e),delete M[e],delete E[n.url],delete C[e],eachReverse(D,function(t,n){t[0]===e&&D.splice(n,1)}),delete b.defQueueMap[e],r&&(r.events.defined&&(C[e]=r.events),d(e))}),o},enable:function(e){var t=getOwn(k,e.id);t&&a(e).enable()},completeLoad:function(e){var t,n,i,o=getOwn(S.shim,e)||{},s=o.exports;for(l();D.length;){if(n=D.shift(),null===n[0]){if(n[0]=e,t)break;t=!0}else n[0]===e&&(t=!0);p(n)}if(b.defQueueMap={},i=getOwn(k,e),!t&&!hasProp(M,e)&&i&&!i.inited){if(!(!S.enforceDefine||s&&getGlobal(s)))return r(e)?void 0:c(makeError("nodefine","No define call for "+e,null,[e]));p([e,o.deps||[],o.exportsFn])}h()},nameToUrl:function(e,t,n){var i,r,o,s,a,u,c,l=getOwn(S.pkgs,e);if(l&&(e=l),c=getOwn(N,e))return b.nameToUrl(c,t,n);if(req.jsExtRegExp.test(e))a=e+(t||"");else{for(i=S.paths,r=e.split("/"),o=r.length;o>0;o-=1)if(s=r.slice(0,o).join("/"),u=getOwn(i,s)){isArray(u)&&(u=u[0]),r.splice(0,o,u);break}a=r.join("/"),a+=t||(/^data\:|^blob\:|\?/.test(a)||n?"":".js"),a=("/"===a.charAt(0)||a.match(/^[\w\+\.\-]+:/)?"":S.baseUrl)+a}return S.urlArgs&&!/^blob\:/.test(a)?a+S.urlArgs(e,a):a},load:function(e,t){req.load(b,e,t)},execCb:function(e,t,n,i){return t.apply(i,n)},onScriptLoad:function(e){if("load"===e.type||readyRegExp.test((e.currentTarget||e.srcElement).readyState)){interactiveScript=null;var t=g(e);b.completeLoad(t.id)}},onScriptError:function(e){var t=g(e);if(!r(t.id)){var n=[];return eachProp(k,function(e,i){0!==i.indexOf("_@r")&&each(e.depMaps,function(e){return e.id===t.id?(n.push(i),!0):void 0})}),c(makeError("scripterror",'Script error for "'+t.id+(n.length?'", needed by: '+n.join(", "):'"'),e,[t.id]))}}},b.require=b.makeRequire(),b}function getInteractiveScript(){return interactiveScript&&"interactive"===interactiveScript.readyState?interactiveScript:(eachReverse(scripts(),function(e){return"interactive"===e.readyState?interactiveScript=e:void 0}),interactiveScript)}var req,s,head,baseElement,dataMain,src,interactiveScript,currentlyAddingScript,mainScript,subPath,version="2.2.0",commentRegExp=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,cjsRequireRegExp=/[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,jsSuffixRegExp=/\.js$/,currDirRegExp=/^\.\//,op=Object.prototype,ostring=op.toString,hasOwn=op.hasOwnProperty,isBrowser=!("undefined"==typeof window||"undefined"==typeof navigator||!window.document),isWebWorker=!isBrowser&&"undefined"!=typeof importScripts,readyRegExp=isBrowser&&"PLAYSTATION 3"===navigator.platform?/^complete$/:/^(complete|loaded)$/,defContextName="_",isOpera="undefined"!=typeof opera&&"[object Opera]"===opera.toString(),contexts={},cfg={},globalDefQueue=[],useInteractive=!1;if("undefined"==typeof define){if("undefined"!=typeof requirejs){if(isFunction(requirejs))return;cfg=requirejs,requirejs=void 0}"undefined"==typeof require||isFunction(require)||(cfg=require,require=void 0),req=requirejs=function(e,t,n,i){var r,o,s=defContextName;return isArray(e)||"string"==typeof e||(o=e,isArray(t)?(e=t,t=n,n=i):e=[]),o&&o.context&&(s=o.context),r=getOwn(contexts,s),r||(r=contexts[s]=req.s.newContext(s)),o&&r.configure(o),r.require(e,t,n)},req.config=function(e){return req(e)},req.nextTick="undefined"!=typeof setTimeout?function(e){setTimeout(e,4)}:function(e){e()},require||(require=req),req.version=version,req.jsExtRegExp=/^\/|:|\?|\.js$/,req.isBrowser=isBrowser,s=req.s={contexts:contexts,newContext:newContext},req({}),each(["toUrl","undef","defined","specified"],function(e){req[e]=function(){var t=contexts[defContextName];return t.require[e].apply(t,arguments)}}),isBrowser&&(head=s.head=document.getElementsByTagName("head")[0],baseElement=document.getElementsByTagName("base")[0],baseElement&&(head=s.head=baseElement.parentNode)),req.onError=defaultOnError,req.createNode=function(e,t,n){var i=e.xhtml?document.createElementNS("http://www.w3.org/1999/xhtml","html:script"):document.createElement("script");return i.type=e.scriptType||"text/javascript",i.charset="utf-8",i.async=!0,i},req.load=function(e,t,n){var i,r=e&&e.config||{};if(isBrowser)return i=req.createNode(r,t,n),i.setAttribute("data-requirecontext",e.contextName),i.setAttribute("data-requiremodule",t),!i.attachEvent||i.attachEvent.toString&&i.attachEvent.toString().indexOf("[native code")<0||isOpera?(i.addEventListener("load",e.onScriptLoad,!1),i.addEventListener("error",e.onScriptError,!1)):(useInteractive=!0,i.attachEvent("onreadystatechange",e.onScriptLoad)),i.src=n,r.onNodeCreated&&r.onNodeCreated(i,r,t,n),currentlyAddingScript=i,baseElement?head.insertBefore(i,baseElement):head.appendChild(i),currentlyAddingScript=null,i;if(isWebWorker)try{setTimeout(function(){},0),importScripts(n),e.completeLoad(t)}catch(o){e.onError(makeError("importscripts","importScripts failed for "+t+" at "+n,o,[t]))}},isBrowser&&!cfg.skipDataMain&&eachReverse(scripts(),function(e){return head||(head=e.parentNode),dataMain=e.getAttribute("data-main"),dataMain?(mainScript=dataMain,cfg.baseUrl||-1!==mainScript.indexOf("!")||(src=mainScript.split("/"),mainScript=src.pop(),subPath=src.length?src.join("/")+"/":"./",cfg.baseUrl=subPath),mainScript=mainScript.replace(jsSuffixRegExp,""),req.jsExtRegExp.test(mainScript)&&(mainScript=dataMain),cfg.deps=cfg.deps?cfg.deps.concat(mainScript):[mainScript],!0):void 0}),define=function(e,t,n){var i,r;"string"!=typeof e&&(n=t,t=e,e=null),isArray(t)||(n=t,t=null),!t&&isFunction(n)&&(t=[],n.length&&(n.toString().replace(commentRegExp,commentReplace).replace(cjsRequireRegExp,function(e,n){t.push(n)}),t=(1===n.length?["require"]:["require","exports","module"]).concat(t))),useInteractive&&(i=currentlyAddingScript||getInteractiveScript(),i&&(e||(e=i.getAttribute("data-requiremodule")),r=contexts[i.getAttribute("data-requirecontext")])),r?(r.defQueue.push([e,t,n]),r.defQueueMap[e]=!0):globalDefQueue.push([e,t,n])},define.amd={jQuery:!0},req.exec=function(text){return eval(text)},req(cfg)}}(this),define("requireLib",function(){}),function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=oe.type(e);return"function"===n||oe.isWindow(e)?!1:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function i(e,t,n){if(oe.isFunction(t))return oe.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return oe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(me.test(t))return oe.filter(t,e,n);t=oe.filter(t,e)}return oe.grep(e,function(e){return K.call(t,e)>-1!==n})}function r(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return oe.each(e.match(we)||[],function(e,n){t[n]=!0}),t}function s(){Q.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s),oe.ready()}function a(){this.expando=oe.expando+a.uid++}function u(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Me,"-$&").toLowerCase(),n=e.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:De.test(n)?oe.parseJSON(n):n}catch(r){}Ce.set(e,t,n)}else n=void 0;return n}function c(e,t,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return oe.css(e,t,"")},u=a(),c=n&&n[3]||(oe.cssNumber[t]?"":"px"),l=(oe.cssNumber[t]||"px"!==c&&+u)&&Ne.exec(oe.css(e,t));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do o=o||".5",l/=o,oe.style(e,t,l+c);while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(l=+l||+u||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=l,i.end=r)),r}function l(e,t){var n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&oe.nodeName(e,t)?oe.merge([e],n):n}function d(e,t){for(var n=0,i=e.length;i>n;n++)Te.set(e[n],"globalEval",!t||Te.get(t[n],"globalEval"))}function f(e,t,n,i,r){for(var o,s,a,u,c,f,h=t.createDocumentFragment(),p=[],m=0,g=e.length;g>m;m++)if(o=e[m],o||0===o)if("object"===oe.type(o))oe.merge(p,o.nodeType?[o]:o);else if(Ye.test(o)){for(s=s||h.appendChild(t.createElement("div")),a=(je.exec(o)||["",""])[1].toLowerCase(),u=Le[a]||Le._default,s.innerHTML=u[1]+oe.htmlPrefilter(o)+u[2],f=u[0];f--;)s=s.lastChild;oe.merge(p,s.childNodes),s=h.firstChild,s.textContent=""}else p.push(t.createTextNode(o));for(h.textContent="",m=0;o=p[m++];)if(i&&oe.inArray(o,i)>-1)r&&r.push(o);else if(c=oe.contains(o.ownerDocument,o),s=l(h.appendChild(o),"script"),c&&d(s),n)for(f=0;o=s[f++];)Pe.test(o.type||"")&&n.push(o);return h}function h(){return!0}function p(){return!1}function m(){try{return Q.activeElement}catch(e){}}function g(e,t,n,i,r,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(a in t)g(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),r===!1)r=p;else if(!r)return e;return 1===o&&(s=r,r=function(e){return oe().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=oe.guid++)),e.each(function(){oe.event.add(this,t,r,i,n)})}function v(e,t){return oe.nodeName(e,"table")&&oe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function x(e){var t=Ue.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function b(e,t){var n,i,r,o,s,a,u,c;if(1===t.nodeType){if(Te.hasData(e)&&(o=Te.access(e),s=Te.set(t,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(n=0,i=c[r].length;i>n;n++)oe.event.add(t,r,c[r][n])}Ce.hasData(e)&&(a=Ce.access(e),u=oe.extend({},a),Ce.set(t,u))}}function w(e,t){var n=t.nodeName.toLowerCase();"input"===n&&qe.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}function _(e,t,n,i){t=Z.apply([],t);var r,o,s,a,u,c,d=0,h=e.length,p=h-1,m=t[0],g=oe.isFunction(m);if(g||h>1&&"string"==typeof m&&!ie.checkClone&&Ge.test(m))return e.each(function(r){var o=e.eq(r);g&&(t[0]=m.call(this,r,o.html())),_(o,t,n,i)});if(h&&(r=f(t,e[0].ownerDocument,!1,e,i),o=r.firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=oe.map(l(r,"script"),y),a=s.length;h>d;d++)u=r,d!==p&&(u=oe.clone(u,!0,!0),a&&oe.merge(s,l(u,"script"))),n.call(e[d],u,d);if(a)for(c=s[s.length-1].ownerDocument,oe.map(s,x),d=0;a>d;d++)u=s[d],Pe.test(u.type||"")&&!Te.access(u,"globalEval")&&oe.contains(c,u)&&(u.src?oe._evalUrl&&oe._evalUrl(u.src):oe.globalEval(u.textContent.replace(Be,"")))}return e}function S(e,t,n){for(var i,r=t?oe.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||oe.cleanData(l(i)),i.parentNode&&(n&&oe.contains(i.ownerDocument,i)&&d(l(i,"script")),i.parentNode.removeChild(i));return e}function k(e,t){var n=oe(t.createElement(e)).appendTo(t.body),i=oe.css(n[0],"display");return n.detach(),i}function T(e){var t=Q,n=$e[e];return n||(n=k(e,t),"none"!==n&&n||(ze=(ze||oe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=ze[0].contentDocument,t.write(),t.close(),n=k(e,t),ze.detach()),$e[e]=n),n}function C(e,t,n){var i,r,o,s,a=e.style;return n=n||Xe(e),s=n?n.getPropertyValue(t)||n[t]:void 0,""!==s&&void 0!==s||oe.contains(e.ownerDocument,e)||(s=oe.style(e,t)),n&&!ie.pixelMarginRight()&&Qe.test(s)&&Ve.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o),void 0!==s?s+"":s}function D(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function M(e){if(e in it)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if(e=nt[n]+t,e in it)return e}function E(e,t,n){var i=Ne.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function N(e,t,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=oe.css(e,n+Oe[o],!0,r)),i?("content"===n&&(s-=oe.css(e,"padding"+Oe[o],!0,r)),"margin"!==n&&(s-=oe.css(e,"border"+Oe[o]+"Width",!0,r))):(s+=oe.css(e,"padding"+Oe[o],!0,r),"padding"!==n&&(s+=oe.css(e,"border"+Oe[o]+"Width",!0,r)));return s}function O(t,n,i){var r=!0,o="width"===n?t.offsetWidth:t.offsetHeight,s=Xe(t),a="border-box"===oe.css(t,"boxSizing",!1,s);if(Q.msFullscreenElement&&e.top!==e&&t.getClientRects().length&&(o=Math.round(100*t.getBoundingClientRect()[n])),0>=o||null==o){if(o=C(t,n,s),(0>o||null==o)&&(o=t.style[n]),Qe.test(o))return o;r=a&&(ie.boxSizingReliable()||o===t.style[n]),o=parseFloat(o)||0}return o+N(t,n,i||(a?"border":"content"),r,s)+"px"}function A(e,t){for(var n,i,r,o=[],s=0,a=e.length;a>s;s++)i=e[s],i.style&&(o[s]=Te.get(i,"olddisplay"),n=i.style.display,t?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Ae(i)&&(o[s]=Te.access(i,"olddisplay",T(i.nodeName)))):(r=Ae(i),"none"===n&&r||Te.set(i,"olddisplay",r?n:oe.css(i,"display"))));for(s=0;a>s;s++)i=e[s],i.style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[s]||"":"none"));return e}function q(e,t,n,i,r){return new q.prototype.init(e,t,n,i,r)}function j(){return e.setTimeout(function(){rt=void 0}),rt=oe.now()}function P(e,t){var n,i=0,r={height:e};for(t=t?1:0;4>i;i+=2-t)n=Oe[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function L(e,t,n){for(var i,r=(W.tweeners[t]||[]).concat(W.tweeners["*"]),o=0,s=r.length;s>o;o++)if(i=r[o].call(n,t,e))return i}function Y(e,t,n){var i,r,o,s,a,u,c,l,d=this,f={},h=e.style,p=e.nodeType&&Ae(e),m=Te.get(e,"fxshow");n.queue||(a=oe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,oe.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=oe.css(e,"display"),l="none"===c?Te.get(e,"olddisplay")||T(e.nodeName):c,"inline"===l&&"none"===oe.css(e,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(i in t)if(r=t[i],st.exec(r)){if(delete t[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;p=!0}f[i]=m&&m[i]||oe.style(e,i)}else c=void 0;if(oe.isEmptyObject(f))"inline"===("none"===c?T(e.nodeName):c)&&(h.display=c);else{m?"hidden"in m&&(p=m.hidden):m=Te.access(e,"fxshow",{}),o&&(m.hidden=!p),p?oe(e).show():d.done(function(){oe(e).hide()}),d.done(function(){var t;Te.remove(e,"fxshow");for(t in f)oe.style(e,t,f[t])});for(i in f)s=L(p?m[i]:0,i,d),i in m||(m[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function H(e,t){var n,i,r,o,s;for(n in e)if(i=oe.camelCase(n),r=t[i],o=e[n],oe.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),s=oe.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function W(e,t,n){var i,r,o=0,s=W.prefilters.length,a=oe.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var t=rt||j(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,o=1-i,s=0,u=c.tweens.length;u>s;s++)c.tweens[s].run(o);return a.notifyWith(e,[c,o,n]),1>o&&u?n:(a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:oe.extend({},t),opts:oe.extend(!0,{specialEasing:{},easing:oe.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||j(),duration:n.duration,tweens:[],createTween:function(t,n){var i=oe.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),l=c.props;for(H(l,c.opts.specialEasing);s>o;o++)if(i=W.prefilters[o].call(c,e,l,c.opts))return oe.isFunction(i.stop)&&(oe._queueHooks(c.elem,c.opts.queue).stop=oe.proxy(i.stop,i)),i;return oe.map(l,L,c),oe.isFunction(c.opts.start)&&c.opts.start.call(e,c),oe.fx.timer(oe.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function R(e){return e.getAttribute&&e.getAttribute("class")||""}function I(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(we)||[];if(oe.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function F(e,t,n,i){function r(a){var u;return o[a]=!0,oe.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||s||o[c]?s?!(u=c):void 0:(t.dataTypes.unshift(c),r(c),!1)}),u}var o={},s=e===Ct;return r(t.dataTypes[0])||!o["*"]&&r("*")}function G(e,t){var n,i,r=oe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&oe.extend(!0,e,i),e}function U(e,t,n){for(var i,r,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||e.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function B(e,t,n,i){var r,o,s,a,u,c={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=c[u+" "+o]||c["* "+o],!s)for(r in c)if(a=r.split(" "),a[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[r]:c[r]!==!0&&(o=a[0],l.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(d){return{state:"parsererror",error:s?d:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function z(e,t,n,i){var r;if(oe.isArray(t))oe.each(t,function(t,r){n||Nt.test(e)?i(e,r):z(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==oe.type(t))i(e,t);else for(r in t)z(e+"["+r+"]",t[r],n,i)}function $(e){return oe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var V=[],Q=e.document,X=V.slice,Z=V.concat,J=V.push,K=V.indexOf,ee={},te=ee.toString,ne=ee.hasOwnProperty,ie={},re="2.2.3",oe=function(e,t){return new oe.fn.init(e,t)},se=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ae=/^-ms-/,ue=/-([\da-z])/gi,ce=function(e,t){return t.toUpperCase()};oe.fn=oe.prototype={jquery:re,constructor:oe,selector:"",length:0,toArray:function(){return X.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:X.call(this)},pushStack:function(e){var t=oe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return oe.each(this,e)},map:function(e){return this.pushStack(oe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(X.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:J,sort:V.sort,splice:V.splice},oe.extend=oe.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||oe.isFunction(s)||(s={}),a===u&&(s=this,a--);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],i=e[t],s!==i&&(c&&i&&(oe.isPlainObject(i)||(r=oe.isArray(i)))?(r?(r=!1,o=n&&oe.isArray(n)?n:[]):o=n&&oe.isPlainObject(n)?n:{},s[t]=oe.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},oe.extend({expando:"jQuery"+(re+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===oe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!oe.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==oe.type(e)||e.nodeType||oe.isWindow(e))return!1;if(e.constructor&&!ne.call(e,"constructor")&&!ne.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||ne.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){
return null==e?e+"":"object"==typeof e||"function"==typeof e?ee[te.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=oe.trim(e),e&&(1===e.indexOf("use strict")?(t=Q.createElement("script"),t.text=e,Q.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(ae,"ms-").replace(ue,ce)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var i,r=0;if(n(e))for(i=e.length;i>r&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(se,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?oe.merge(i,"string"==typeof e?[e]:e):J.call(i,e)),i},inArray:function(e,t,n){return null==t?-1:K.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;n>i;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i,r=[],o=0,s=e.length,a=!n;s>o;o++)i=!t(e[o],o),i!==a&&r.push(e[o]);return r},map:function(e,t,i){var r,o,s=0,a=[];if(n(e))for(r=e.length;r>s;s++)o=t(e[s],s,i),null!=o&&a.push(o);else for(s in e)o=t(e[s],s,i),null!=o&&a.push(o);return Z.apply([],a)},guid:1,proxy:function(e,t){var n,i,r;return"string"==typeof t&&(n=e[t],t=e,e=n),oe.isFunction(e)?(i=X.call(arguments,2),r=function(){return e.apply(t||this,i.concat(X.call(arguments)))},r.guid=e.guid=e.guid||oe.guid++,r):void 0},now:Date.now,support:ie}),"function"==typeof Symbol&&(oe.fn[Symbol.iterator]=V[Symbol.iterator]),oe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ee["[object "+t+"]"]=t.toLowerCase()});var le=function(e){function t(e,t,n,i){var r,o,s,a,u,c,d,h,p=t&&t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==m&&9!==m&&11!==m)return n;if(!i&&((t?t.ownerDocument||t:R)!==A&&O(t),t=t||A,j)){if(11!==m&&(c=ve.exec(e)))if(r=c[1]){if(9===m){if(!(s=t.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(p&&(s=p.getElementById(r))&&H(t,s)&&s.id===r)return n.push(s),n}else{if(c[2])return J.apply(n,t.getElementsByTagName(e)),n;if((r=c[3])&&w.getElementsByClassName&&t.getElementsByClassName)return J.apply(n,t.getElementsByClassName(r)),n}if(w.qsa&&!B[e+" "]&&(!P||!P.test(e))){if(1!==m)p=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(xe,"\\$&"):t.setAttribute("id",a=W),d=T(e),o=d.length,u=fe.test(a)?"#"+a:"[id='"+a+"']";o--;)d[o]=u+" "+f(d[o]);h=d.join(","),p=ye.test(e)&&l(t.parentNode)||t}if(h)try{return J.apply(n,p.querySelectorAll(h)),n}catch(g){}finally{a===W&&t.removeAttribute("id")}}}return D(e.replace(ae,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>_.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[W]=!0,e}function r(e){var t=A.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=n.length;i--;)_.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||$)-(~e.sourceIndex||$);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function l(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function d(){}function f(e){for(var t=0,n=e.length,i="";n>t;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,r=n&&"parentNode"===i,o=F++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,o)}:function(t,n,s){var a,u,c,l=[I,o];if(s){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,s))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if(c=t[W]||(t[W]={}),u=c[t.uniqueID]||(c[t.uniqueID]={}),(a=u[i])&&a[0]===I&&a[1]===o)return l[2]=a[2];if(u[i]=l,l[2]=e(t,n,s))return!0}}}function p(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function m(e,n,i){for(var r=0,o=n.length;o>r;r++)t(e,n[r],i);return i}function g(e,t,n,i,r){for(var o,s=[],a=0,u=e.length,c=null!=t;u>a;a++)(o=e[a])&&(!n||n(o,i,r))&&(s.push(o),c&&t.push(a));return s}function v(e,t,n,r,o,s){return r&&!r[W]&&(r=v(r)),o&&!o[W]&&(o=v(o,s)),i(function(i,s,a,u){var c,l,d,f=[],h=[],p=s.length,v=i||m(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?v:g(v,f,e,a,u),x=n?o||(i?e:p||r)?[]:s:y;if(n&&n(y,x,a,u),r)for(c=g(x,h),r(c,[],a,u),l=c.length;l--;)(d=c[l])&&(x[h[l]]=!(y[h[l]]=d));if(i){if(o||e){if(o){for(c=[],l=x.length;l--;)(d=x[l])&&c.push(y[l]=d);o(null,x=[],c,u)}for(l=x.length;l--;)(d=x[l])&&(c=o?ee(i,d):f[l])>-1&&(i[c]=!(s[c]=d))}}else x=g(x===s?x.splice(p,x.length):x),o?o(null,s,x,u):J.apply(s,x)})}function y(e){for(var t,n,i,r=e.length,o=_.relative[e[0].type],s=o||_.relative[" "],a=o?1:0,u=h(function(e){return e===t},s,!0),c=h(function(e){return ee(t,e)>-1},s,!0),l=[function(e,n,i){var r=!o&&(i||n!==M)||((t=n).nodeType?u(e,n,i):c(e,n,i));return t=null,r}];r>a;a++)if(n=_.relative[e[a].type])l=[h(p(l),n)];else{if(n=_.filter[e[a].type].apply(null,e[a].matches),n[W]){for(i=++a;r>i&&!_.relative[e[i].type];i++);return v(a>1&&p(l),a>1&&f(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,i>a&&y(e.slice(a,i)),r>i&&y(e=e.slice(i)),r>i&&f(e))}l.push(n)}return p(l)}function x(e,n){var r=n.length>0,o=e.length>0,s=function(i,s,a,u,c){var l,d,f,h=0,p="0",m=i&&[],v=[],y=M,x=i||o&&_.find.TAG("*",c),b=I+=null==y?1:Math.random()||.1,w=x.length;for(c&&(M=s===A||s||c);p!==w&&null!=(l=x[p]);p++){if(o&&l){for(d=0,s||l.ownerDocument===A||(O(l),a=!j);f=e[d++];)if(f(l,s||A,a)){u.push(l);break}c&&(I=b)}r&&((l=!f&&l)&&h--,i&&m.push(l))}if(h+=p,r&&p!==h){for(d=0;f=n[d++];)f(m,v,s,a);if(i){if(h>0)for(;p--;)m[p]||v[p]||(v[p]=X.call(u));v=g(v)}J.apply(u,v),c&&!i&&v.length>0&&h+n.length>1&&t.uniqueSort(u)}return c&&(I=b,M=y),m};return r?i(s):s}var b,w,_,S,k,T,C,D,M,E,N,O,A,q,j,P,L,Y,H,W="sizzle"+1*new Date,R=e.document,I=0,F=0,G=n(),U=n(),B=n(),z=function(e,t){return e===t&&(N=!0),0},$=1<<31,V={}.hasOwnProperty,Q=[],X=Q.pop,Z=Q.push,J=Q.push,K=Q.slice,ee=function(e,t){for(var n=0,i=e.length;i>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",re="\\["+ne+"*("+ie+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",oe=":("+ie+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+re+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),le=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(oe),fe=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie+"|[*])"),ATTR:new RegExp("^"+re),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,xe=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},_e=function(){O()};try{J.apply(Q=K.call(R.childNodes),R.childNodes),Q[R.childNodes.length].nodeType}catch(Se){J={apply:Q.length?function(e,t){Z.apply(e,K.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},O=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:R;return i!==A&&9===i.nodeType&&i.documentElement?(A=i,q=A.documentElement,j=!k(A),(n=A.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",_e,!1):n.attachEvent&&n.attachEvent("onunload",_e)),w.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=r(function(e){return e.appendChild(A.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=ge.test(A.getElementsByClassName),w.getById=r(function(e){return q.appendChild(e).id=W,!A.getElementsByName||!A.getElementsByName(W).length}),w.getById?(_.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&j){var n=t.getElementById(e);return n?[n]:[]}},_.filter.ID=function(e){var t=e.replace(be,we);return function(e){return e.getAttribute("id")===t}}):(delete _.find.ID,_.filter.ID=function(e){var t=e.replace(be,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),_.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},_.find.CLASS=w.getElementsByClassName&&function(e,t){return"undefined"!=typeof t.getElementsByClassName&&j?t.getElementsByClassName(e):void 0},L=[],P=[],(w.qsa=ge.test(A.querySelectorAll))&&(r(function(e){q.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||P.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||P.push("~="),e.querySelectorAll(":checked").length||P.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||P.push(".#.+[+~]")}),r(function(e){var t=A.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&P.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||P.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),P.push(",.*:")})),(w.matchesSelector=ge.test(Y=q.matches||q.webkitMatchesSelector||q.mozMatchesSelector||q.oMatchesSelector||q.msMatchesSelector))&&r(function(e){w.disconnectedMatch=Y.call(e,"div"),Y.call(e,"[s!='']:x"),L.push("!=",oe)}),P=P.length&&new RegExp(P.join("|")),L=L.length&&new RegExp(L.join("|")),t=ge.test(q.compareDocumentPosition),H=t||ge.test(q.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return N=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===A||e.ownerDocument===R&&H(R,e)?-1:t===A||t.ownerDocument===R&&H(R,t)?1:E?ee(E,e)-ee(E,t):0:4&n?-1:1)}:function(e,t){if(e===t)return N=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!r||!o)return e===A?-1:t===A?1:r?-1:o?1:E?ee(E,e)-ee(E,t):0;if(r===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[i]===u[i];)i++;return i?s(a[i],u[i]):a[i]===R?-1:u[i]===R?1:0},A):A},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==A&&O(e),n=n.replace(le,"='$1']"),w.matchesSelector&&j&&!B[n+" "]&&(!L||!L.test(n))&&(!P||!P.test(n)))try{var i=Y.call(e,n);if(i||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(r){}return t(n,A,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==A&&O(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==A&&O(e);var n=_.attrHandle[t.toLowerCase()],i=n&&V.call(_.attrHandle,t.toLowerCase())?n(e,t,!j):void 0;return void 0!==i?i:w.attributes||!j?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(N=!w.detectDuplicates,E=!w.sortStable&&e.slice(0),e.sort(z),N){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return E=null,e},S=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=S(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=S(t);return n},_=t.selectors={cacheLength:50,createPseudo:i,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,we),e[3]=(e[3]||e[4]||e[5]||"").replace(be,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=G[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&G(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(se," ")+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,u){var c,l,d,f,h,p,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a,x=!1;if(g){if(o){for(;m;){for(f=t;f=f[m];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=m="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?g.firstChild:g.lastChild],s&&y){for(f=g,d=f[W]||(f[W]={}),l=d[f.uniqueID]||(d[f.uniqueID]={}),c=l[e]||[],h=c[0]===I&&c[1],x=h&&c[2],f=h&&g.childNodes[h];f=++h&&f&&f[m]||(x=h=0)||p.pop();)if(1===f.nodeType&&++x&&f===t){l[e]=[I,h,x];break}}else if(y&&(f=t,d=f[W]||(f[W]={}),l=d[f.uniqueID]||(d[f.uniqueID]={}),c=l[e]||[],h=c[0]===I&&c[1],x=h),x===!1)for(;(f=++h&&f&&f[m]||(x=h=0)||p.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++x||(y&&(d=f[W]||(f[W]={}),l=d[f.uniqueID]||(d[f.uniqueID]={}),l[e]=[I,x]),f!==t)););return x-=r,x===i||x%i===0&&x/i>=0}}},PSEUDO:function(e,n){var r,o=_.pseudos[e]||_.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(r=[e,e,"",n],_.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),s=r.length;s--;)i=ee(e,r[s]),e[i]=!(t[i]=r[s])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=C(e.replace(ae,"$1"));return r[W]?i(function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(be,we),function(t){return(t.textContent||t.innerText||S(t)).indexOf(e)>-1}}),lang:i(function(e){return fe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,we).toLowerCase(),function(t){var n;do if(n=j?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===q},focus:function(e){return e===A.activeElement&&(!A.hasFocus||A.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!_.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[0>n?n+t:n]}),even:c(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var i=0>n?n+t:n;--i>=0;)e.push(i);return e}),gt:c(function(e,t,n){for(var i=0>n?n+t:n;++i<t;)e.push(i);return e})}},_.pseudos.nth=_.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})_.pseudos[b]=u(b);return d.prototype=_.filters=_.pseudos,_.setFilters=new d,T=t.tokenize=function(e,n){var i,r,o,s,a,u,c,l=U[e+" "];if(l)return n?0:l.slice(0);for(a=e,u=[],c=_.preFilter;a;){(!i||(r=ue.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),i=!1,(r=ce.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(ae," ")}),a=a.slice(i.length));for(s in _.filter)!(r=he[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):U(e,u).slice(0)},C=t.compile=function(e,t){var n,i=[],r=[],o=B[e+" "];if(!o){for(t||(t=T(e)),n=t.length;n--;)o=y(t[n]),o[W]?i.push(o):r.push(o);o=B(e,x(r,i)),o.selector=e}return o},D=t.select=function(e,t,n,i){var r,o,s,a,u,c="function"==typeof e&&e,d=!i&&T(e=c.selector||e);if(n=n||[],1===d.length){if(o=d[0]=d[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===t.nodeType&&j&&_.relative[o[1].type]){if(t=(_.find.ID(s.matches[0].replace(be,we),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=he.needsContext.test(e)?0:o.length;r--&&(s=o[r],!_.relative[a=s.type]);)if((u=_.find[a])&&(i=u(s.matches[0].replace(be,we),ye.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(r,1),e=i.length&&f(o),!e)return J.apply(n,i),n;break}}return(c||C(e,d))(i,t,!j,n,!t||ye.test(e)&&l(t.parentNode)||t),n},w.sortStable=W.split("").sort(z).join("")===W,w.detectDuplicates=!!N,O(),w.sortDetached=r(function(e){return 1&e.compareDocumentPosition(A.createElement("div"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var i;return n?void 0:e[t]===!0?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);oe.find=le,oe.expr=le.selectors,oe.expr[":"]=oe.expr.pseudos,oe.uniqueSort=oe.unique=le.uniqueSort,oe.text=le.getText,oe.isXMLDoc=le.isXML,oe.contains=le.contains;var de=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&oe(e).is(n))break;i.push(e)}return i},fe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},he=oe.expr.match.needsContext,pe=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,me=/^.[^:#\[\.,]*$/;oe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?oe.find.matchesSelector(i,e)?[i]:[]:oe.find.matches(e,oe.grep(t,function(e){return 1===e.nodeType}))},oe.fn.extend({find:function(e){var t,n=this.length,i=[],r=this;if("string"!=typeof e)return this.pushStack(oe(e).filter(function(){for(t=0;n>t;t++)if(oe.contains(r[t],this))return!0}));for(t=0;n>t;t++)oe.find(e,r[t],i);return i=this.pushStack(n>1?oe.unique(i):i),i.selector=this.selector?this.selector+" "+e:e,i},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&he.test(e)?oe(e):e||[],!1).length}});var ge,ve=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ye=oe.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||ge,"string"==typeof e){if(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ve.exec(e),!i||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof oe?t[0]:t,oe.merge(this,oe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:Q,!0)),pe.test(i[1])&&oe.isPlainObject(t))for(i in t)oe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return r=Q.getElementById(i[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=Q,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):oe.isFunction(e)?void 0!==n.ready?n.ready(e):e(oe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),oe.makeArray(e,this))};ye.prototype=oe.fn,ge=oe(Q);var xe=/^(?:parents|prev(?:Until|All))/,be={children:!0,contents:!0,next:!0,prev:!0};oe.fn.extend({has:function(e){var t=oe(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(oe.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,o=[],s=he.test(e)||"string"!=typeof e?oe(e,t||this.context):0;r>i;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&oe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?oe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?K.call(oe(e),this[0]):K.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(oe.uniqueSort(oe.merge(this.get(),oe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),oe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return de(e,"parentNode")},parentsUntil:function(e,t,n){return de(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return de(e,"nextSibling")},prevAll:function(e){return de(e,"previousSibling")},nextUntil:function(e,t,n){return de(e,"nextSibling",n)},prevUntil:function(e,t,n){return de(e,"previousSibling",n)},siblings:function(e){return fe((e.parentNode||{}).firstChild,e)},children:function(e){return fe(e.firstChild)},contents:function(e){return e.contentDocument||oe.merge([],e.childNodes)}},function(e,t){oe.fn[e]=function(n,i){var r=oe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=oe.filter(i,r)),this.length>1&&(be[e]||oe.uniqueSort(r),xe.test(e)&&r.reverse()),this.pushStack(r)}});var we=/\S+/g;oe.Callbacks=function(e){e="string"==typeof e?o(e):oe.extend({},e);var t,n,i,r,s=[],a=[],u=-1,c=function(){for(r=e.once,i=t=!0;a.length;u=-1)for(n=a.shift();++u<s.length;)s[u].apply(n[0],n[1])===!1&&e.stopOnFalse&&(u=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},l={add:function(){return s&&(n&&!t&&(u=s.length-1,a.push(n)),function i(t){oe.each(t,function(t,n){oe.isFunction(n)?e.unique&&l.has(n)||s.push(n):n&&n.length&&"string"!==oe.type(n)&&i(n)})}(arguments),n&&!t&&c()),this},remove:function(){return oe.each(arguments,function(e,t){for(var n;(n=oe.inArray(t,s,n))>-1;)s.splice(n,1),u>=n&&u--}),this},has:function(e){return e?oe.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=a=[],n||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!i}};return l},oe.extend({Deferred:function(e){var t=[["resolve","done",oe.Callbacks("once memory"),"resolved"],["reject","fail",oe.Callbacks("once memory"),"rejected"],["notify","progress",oe.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return oe.Deferred(function(n){oe.each(t,function(t,o){var s=oe.isFunction(e[t])&&e[t];r[o[1]](function(){var e=s&&s.apply(this,arguments);e&&oe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===i?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?oe.extend(e,i):i}},r={};return i.pipe=i.then,oe.each(t,function(e,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,r=0,o=X.call(arguments),s=o.length,a=1!==s||e&&oe.isFunction(e.promise)?s:0,u=1===a?e:oe.Deferred(),c=function(e,n,i){return function(r){n[e]=this,i[e]=arguments.length>1?X.call(arguments):r,i===t?u.notifyWith(n,i):--a||u.resolveWith(n,i)}};if(s>1)for(t=new Array(s),n=new Array(s),i=new Array(s);s>r;r++)o[r]&&oe.isFunction(o[r].promise)?o[r].promise().progress(c(r,n,t)).done(c(r,i,o)).fail(u.reject):--a;return a||u.resolveWith(i,o),u.promise()}});var _e;oe.fn.ready=function(e){return oe.ready.promise().done(e),this},oe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?oe.readyWait++:oe.ready(!0)},ready:function(e){(e===!0?--oe.readyWait:oe.isReady)||(oe.isReady=!0,e!==!0&&--oe.readyWait>0||(_e.resolveWith(Q,[oe]),oe.fn.triggerHandler&&(oe(Q).triggerHandler("ready"),oe(Q).off("ready"))))}}),oe.ready.promise=function(t){return _e||(_e=oe.Deferred(),"complete"===Q.readyState||"loading"!==Q.readyState&&!Q.documentElement.doScroll?e.setTimeout(oe.ready):(Q.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s))),_e.promise(t)},oe.ready.promise();var Se=function(e,t,n,i,r,o,s){var a=0,u=e.length,c=null==n;if("object"===oe.type(n)){r=!0;for(a in n)Se(e,t,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,oe.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(oe(e),n)})),t))for(;u>a;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):u?t(e[0],n):o},ke=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};a.uid=1,a.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!ke(e))return{};var t=e[this.expando];return t||(t={},ke(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[t]=n;else for(i in t)r[i]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var i;return void 0===t||t&&"string"==typeof t&&void 0===n?(i=this.get(e,t),void 0!==i?i:this.get(e,oe.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i,r,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{oe.isArray(t)?i=t.concat(t.map(oe.camelCase)):(r=oe.camelCase(t),t in o?i=[t,r]:(i=r,i=i in o?[i]:i.match(we)||[])),n=i.length;for(;n--;)delete o[i[n]]}(void 0===t||oe.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!oe.isEmptyObject(t)}};var Te=new a,Ce=new a,De=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Me=/[A-Z]/g;oe.extend({hasData:function(e){return Ce.hasData(e)||Te.hasData(e)},data:function(e,t,n){return Ce.access(e,t,n)},removeData:function(e,t){Ce.remove(e,t)},_data:function(e,t,n){return Te.access(e,t,n)},_removeData:function(e,t){Te.remove(e,t)}}),oe.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Ce.get(o),1===o.nodeType&&!Te.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=oe.camelCase(i.slice(5)),u(o,i,r[i])));Te.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Ce.set(this,e)}):Se(this,function(t){var n,i;if(o&&void 0===t){if(n=Ce.get(o,e)||Ce.get(o,e.replace(Me,"-$&").toLowerCase()),void 0!==n)return n;if(i=oe.camelCase(e),n=Ce.get(o,i),void 0!==n)return n;if(n=u(o,i,void 0),void 0!==n)return n}else i=oe.camelCase(e),this.each(function(){var n=Ce.get(this,i);Ce.set(this,i,t),e.indexOf("-")>-1&&void 0!==n&&Ce.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ce.remove(this,e)})}}),oe.extend({queue:function(e,t,n){var i;return e?(t=(t||"fx")+"queue",i=Te.get(e,t),n&&(!i||oe.isArray(n)?i=Te.access(e,t,oe.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=oe.queue(e,t),i=n.length,r=n.shift(),o=oe._queueHooks(e,t),s=function(){oe.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Te.get(e,n)||Te.access(e,n,{empty:oe.Callbacks("once memory").add(function(){Te.remove(e,[t+"queue",n])})})}}),oe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?oe.queue(this[0],e):void 0===t?this:this.each(function(){var n=oe.queue(this,e,t);oe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&oe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){oe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=oe.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=Te.get(o[s],e+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var Ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ne=new RegExp("^(?:([+-])=|)("+Ee+")([a-z%]*)$","i"),Oe=["Top","Right","Bottom","Left"],Ae=function(e,t){return e=t||e,"none"===oe.css(e,"display")||!oe.contains(e.ownerDocument,e)},qe=/^(?:checkbox|radio)$/i,je=/<([\w:-]+)/,Pe=/^$|\/(?:java|ecma)script/i,Le={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Le.optgroup=Le.option,Le.tbody=Le.tfoot=Le.colgroup=Le.caption=Le.thead,Le.th=Le.td;var Ye=/<|&#?\w+;/;!function(){var e=Q.createDocumentFragment(),t=e.appendChild(Q.createElement("div")),n=Q.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),
t.appendChild(n),ie.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ie.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var He=/^key/,We=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Re=/^([^.]*)(?:\.(.+)|)/;oe.event={global:{},add:function(e,t,n,i,r){var o,s,a,u,c,l,d,f,h,p,m,g=Te.get(e);if(g)for(n.handler&&(o=n,n=o.handler,r=o.selector),n.guid||(n.guid=oe.guid++),(u=g.events)||(u=g.events={}),(s=g.handle)||(s=g.handle=function(t){return"undefined"!=typeof oe&&oe.event.triggered!==t.type?oe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(we)||[""],c=t.length;c--;)a=Re.exec(t[c])||[],h=m=a[1],p=(a[2]||"").split(".").sort(),h&&(d=oe.event.special[h]||{},h=(r?d.delegateType:d.bindType)||h,d=oe.event.special[h]||{},l=oe.extend({type:h,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&oe.expr.match.needsContext.test(r),namespace:p.join(".")},o),(f=u[h])||(f=u[h]=[],f.delegateCount=0,d.setup&&d.setup.call(e,i,p,s)!==!1||e.addEventListener&&e.addEventListener(h,s)),d.add&&(d.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,l):f.push(l),oe.event.global[h]=!0)},remove:function(e,t,n,i,r){var o,s,a,u,c,l,d,f,h,p,m,g=Te.hasData(e)&&Te.get(e);if(g&&(u=g.events)){for(t=(t||"").match(we)||[""],c=t.length;c--;)if(a=Re.exec(t[c])||[],h=m=a[1],p=(a[2]||"").split(".").sort(),h){for(d=oe.event.special[h]||{},h=(i?d.delegateType:d.bindType)||h,f=u[h]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)l=f[o],!r&&m!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(f.splice(o,1),l.selector&&f.delegateCount--,d.remove&&d.remove.call(e,l));s&&!f.length&&(d.teardown&&d.teardown.call(e,p,g.handle)!==!1||oe.removeEvent(e,h,g.handle),delete u[h])}else for(h in u)oe.event.remove(e,h+t[c],n,i,!0);oe.isEmptyObject(u)&&Te.remove(e,"handle events")}},dispatch:function(e){e=oe.event.fix(e);var t,n,i,r,o,s=[],a=X.call(arguments),u=(Te.get(this,"events")||{})[e.type]||[],c=oe.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){for(s=oe.event.handlers.call(this,e,u),t=0;(r=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.rnamespace||e.rnamespace.test(o.namespace))&&(e.handleObj=o,e.data=o.data,i=((oe.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a),void 0!==i&&(e.result=i)===!1&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(i=[],n=0;a>n;n++)o=t[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?oe(r,this).index(u)>-1:oe.find(r,this,null,[u]).length),i[r]&&i.push(o);i.length&&s.push({elem:u,handlers:i})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||Q,i=n.documentElement,r=n.body,e.pageX=t.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[oe.expando])return e;var t,n,i,r=e.type,o=e,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=We.test(r)?this.mouseHooks:He.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new oe.Event(o),t=i.length;t--;)n=i[t],e[n]=o[n];return e.target||(e.target=Q),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==m()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===m()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&oe.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return oe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},oe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},oe.Event=function(e,t){return this instanceof oe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?h:p):this.type=e,t&&oe.extend(this,t),this.timeStamp=e&&e.timeStamp||oe.now(),void(this[oe.expando]=!0)):new oe.Event(e,t)},oe.Event.prototype={constructor:oe.Event,isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=h,e&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=h,e&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=h,e&&e.stopImmediatePropagation(),this.stopPropagation()}},oe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){oe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return(!r||r!==i&&!oe.contains(i,r))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),oe.fn.extend({on:function(e,t,n,i){return g(this,e,t,n,i)},one:function(e,t,n,i){return g(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,oe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=p),this.each(function(){oe.event.remove(this,e,n,t)})}});var Ie=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Fe=/<script|<style|<link/i,Ge=/checked\s*(?:[^=]|=\s*.checked.)/i,Ue=/^true\/(.*)/,Be=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;oe.extend({htmlPrefilter:function(e){return e.replace(Ie,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a=e.cloneNode(!0),u=oe.contains(e.ownerDocument,e);if(!(ie.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||oe.isXMLDoc(e)))for(s=l(a),o=l(e),i=0,r=o.length;r>i;i++)w(o[i],s[i]);if(t)if(n)for(o=o||l(e),s=s||l(a),i=0,r=o.length;r>i;i++)b(o[i],s[i]);else b(e,a);return s=l(a,"script"),s.length>0&&d(s,!u&&l(e,"script")),a},cleanData:function(e){for(var t,n,i,r=oe.event.special,o=0;void 0!==(n=e[o]);o++)if(ke(n)){if(t=n[Te.expando]){if(t.events)for(i in t.events)r[i]?oe.event.remove(n,i):oe.removeEvent(n,i,t.handle);n[Te.expando]=void 0}n[Ce.expando]&&(n[Ce.expando]=void 0)}}}),oe.fn.extend({domManip:_,detach:function(e){return S(this,e,!0)},remove:function(e){return S(this,e)},text:function(e){return Se(this,function(e){return void 0===e?oe.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return _(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.appendChild(e)}})},prepend:function(){return _(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return _(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return _(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(oe.cleanData(l(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return oe.clone(this,e,t)})},html:function(e){return Se(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Fe.test(e)&&!Le[(je.exec(e)||["",""])[1].toLowerCase()]){e=oe.htmlPrefilter(e);try{for(;i>n;n++)t=this[n]||{},1===t.nodeType&&(oe.cleanData(l(t,!1)),t.innerHTML=e);t=0}catch(r){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return _(this,arguments,function(t){var n=this.parentNode;oe.inArray(this,e)<0&&(oe.cleanData(l(this)),n&&n.replaceChild(t,this))},e)}}),oe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){oe.fn[e]=function(e){for(var n,i=[],r=oe(e),o=r.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),oe(r[s])[t](n),J.apply(i,n.get());return this.pushStack(i)}});var ze,$e={HTML:"block",BODY:"block"},Ve=/^margin/,Qe=new RegExp("^("+Ee+")(?!px)[a-z%]+$","i"),Xe=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Ze=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=s[o];return r},Je=Q.documentElement;!function(){function t(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Je.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Je.removeChild(s)}var n,i,r,o,s=Q.createElement("div"),a=Q.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",ie.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),oe.extend(ie,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==i&&t(),i},pixelMarginRight:function(){return null==i&&t(),r},reliableMarginLeft:function(){return null==i&&t(),o},reliableMarginRight:function(){var t,n=a.appendChild(Q.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Je.appendChild(s),t=!parseFloat(e.getComputedStyle(n).marginRight),Je.removeChild(s),a.removeChild(n),t}}))}();var Ke=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"},nt=["Webkit","O","Moz","ms"],it=Q.createElement("div").style;oe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=C(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=oe.camelCase(t),u=e.style;return t=oe.cssProps[a]||(oe.cssProps[a]=M(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:u[t]:(o=typeof n,"string"===o&&(r=Ne.exec(n))&&r[1]&&(n=c(e,t,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(oe.cssNumber[a]?"":"px")),ie.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(u[t]=n)),void 0)}},css:function(e,t,n,i){var r,o,s,a=oe.camelCase(t);return t=oe.cssProps[a]||(oe.cssProps[a]=M(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],s&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=C(e,t,i)),"normal"===r&&t in tt&&(r=tt[t]),""===n||n?(o=parseFloat(r),n===!0||isFinite(o)?o||0:r):r}}),oe.each(["height","width"],function(e,t){oe.cssHooks[t]={get:function(e,n,i){return n?Ke.test(oe.css(e,"display"))&&0===e.offsetWidth?Ze(e,et,function(){return O(e,t,i)}):O(e,t,i):void 0},set:function(e,n,i){var r,o=i&&Xe(e),s=i&&N(e,t,i,"border-box"===oe.css(e,"boxSizing",!1,o),o);return s&&(r=Ne.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=oe.css(e,t)),E(e,n,s)}}}),oe.cssHooks.marginLeft=D(ie.reliableMarginLeft,function(e,t){return t?(parseFloat(C(e,"marginLeft"))||e.getBoundingClientRect().left-Ze(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px":void 0}),oe.cssHooks.marginRight=D(ie.reliableMarginRight,function(e,t){return t?Ze(e,{display:"inline-block"},C,[e,"marginRight"]):void 0}),oe.each({margin:"",padding:"",border:"Width"},function(e,t){oe.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[e+Oe[i]+t]=o[i]||o[i-2]||o[0];return r}},Ve.test(e)||(oe.cssHooks[e+t].set=E)}),oe.fn.extend({css:function(e,t){return Se(this,function(e,t,n){var i,r,o={},s=0;if(oe.isArray(t)){for(i=Xe(e),r=t.length;r>s;s++)o[t[s]]=oe.css(e,t[s],!1,i);return o}return void 0!==n?oe.style(e,t,n):oe.css(e,t)},e,t,arguments.length>1)},show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ae(this)?oe(this).show():oe(this).hide()})}}),oe.Tween=q,q.prototype={constructor:q,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||oe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(oe.cssNumber[n]?"":"px")},cur:function(){var e=q.propHooks[this.prop];return e&&e.get?e.get(this):q.propHooks._default.get(this)},run:function(e){var t,n=q.propHooks[this.prop];return this.options.duration?this.pos=t=oe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):q.propHooks._default.set(this),this}},q.prototype.init.prototype=q.prototype,q.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=oe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){oe.fx.step[e.prop]?oe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[oe.cssProps[e.prop]]&&!oe.cssHooks[e.prop]?e.elem[e.prop]=e.now:oe.style(e.elem,e.prop,e.now+e.unit)}}},q.propHooks.scrollTop=q.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},oe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},oe.fx=q.prototype.init,oe.fx.step={};var rt,ot,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;oe.Animation=oe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return c(n.elem,e,Ne.exec(t),n),n}]},tweener:function(e,t){oe.isFunction(e)?(t=e,e=["*"]):e=e.match(we);for(var n,i=0,r=e.length;r>i;i++)n=e[i],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[Y],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),oe.speed=function(e,t,n){var i=e&&"object"==typeof e?oe.extend({},e):{complete:n||!n&&t||oe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!oe.isFunction(t)&&t};return i.duration=oe.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in oe.fx.speeds?oe.fx.speeds[i.duration]:oe.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){oe.isFunction(i.old)&&i.old.call(this),i.queue&&oe.dequeue(this,i.queue)},i},oe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Ae).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=oe.isEmptyObject(e),o=oe.speed(t,n,i),s=function(){var t=W(this,oe.extend({},e),o);(r||Te.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=oe.timers,s=Te.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&at.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));(t||!n)&&oe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Te.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=oe.timers,s=i?i.length:0;for(n.finish=!0,oe.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),oe.each(["toggle","show","hide"],function(e,t){var n=oe.fn[t];oe.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(P(t,!0),e,i,r)}}),oe.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){oe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),oe.timers=[],oe.fx.tick=function(){var e,t=0,n=oe.timers;for(rt=oe.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||oe.fx.stop(),rt=void 0},oe.fx.timer=function(e){oe.timers.push(e),e()?oe.fx.start():oe.timers.pop()},oe.fx.interval=13,oe.fx.start=function(){ot||(ot=e.setInterval(oe.fx.tick,oe.fx.interval))},oe.fx.stop=function(){e.clearInterval(ot),ot=null},oe.fx.speeds={slow:600,fast:200,_default:400},oe.fn.delay=function(t,n){return t=oe.fx?oe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=Q.createElement("input"),t=Q.createElement("select"),n=t.appendChild(Q.createElement("option"));e.type="checkbox",ie.checkOn=""!==e.value,ie.optSelected=n.selected,t.disabled=!0,ie.optDisabled=!n.disabled,e=Q.createElement("input"),e.value="t",e.type="radio",ie.radioValue="t"===e.value}();var ut,ct=oe.expr.attrHandle;oe.fn.extend({attr:function(e,t){return Se(this,oe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){oe.removeAttr(this,e)})}}),oe.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?oe.prop(e,t,n):(1===o&&oe.isXMLDoc(e)||(t=t.toLowerCase(),r=oe.attrHooks[t]||(oe.expr.match.bool.test(t)?ut:void 0)),void 0!==n?null===n?void oe.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=oe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!ie.radioValue&&"radio"===t&&oe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(we);if(o&&1===e.nodeType)for(;n=o[r++];)i=oe.propFix[n]||n,oe.expr.match.bool.test(n)&&(e[i]=!1),e.removeAttribute(n)}}),ut={set:function(e,t,n){return t===!1?oe.removeAttr(e,n):e.setAttribute(n,n),n}},oe.each(oe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ct[t]||oe.find.attr;ct[t]=function(e,t,i){var r,o;return i||(o=ct[t],ct[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,ct[t]=o),r}});var lt=/^(?:input|select|textarea|button)$/i,dt=/^(?:a|area)$/i;oe.fn.extend({prop:function(e,t){return Se(this,oe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[oe.propFix[e]||e]})}}),oe.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&oe.isXMLDoc(e)||(t=oe.propFix[t]||t,r=oe.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=oe.find.attr(e,"tabindex");return t?parseInt(t,10):lt.test(e.nodeName)||dt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),ie.optSelected||(oe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),oe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){oe.propFix[this.toLowerCase()]=this});var ft=/[\t\r\n\f]/g;oe.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).addClass(e.call(this,t,R(this)))});if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(r=R(n),i=1===n.nodeType&&(" "+r+" ").replace(ft," ")){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");a=oe.trim(i),r!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).removeClass(e.call(this,t,R(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(r=R(n),i=1===n.nodeType&&(" "+r+" ").replace(ft," ")){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");a=oe.trim(i),r!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):oe.isFunction(e)?this.each(function(n){oe(this).toggleClass(e.call(this,n,R(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=oe(this),o=e.match(we)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else(void 0===e||"boolean"===n)&&(t=R(this),t&&Te.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Te.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+R(n)+" ").replace(ft," ").indexOf(t)>-1)return!0;return!1}});var ht=/\r/g,pt=/[\x20\t\r\n\f]+/g;oe.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=oe.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,oe(this).val()):e,null==r?r="":"number"==typeof r?r+="":oe.isArray(r)&&(r=oe.map(r,function(e){return null==e?"":e+""})),t=oe.valHooks[this.type]||oe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return t=oe.valHooks[r.type]||oe.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(ht,""):null==n?"":n)}}}),oe.extend({valHooks:{option:{get:function(e){var t=oe.find.attr(e,"value");return null!=t?t:oe.trim(oe.text(e)).replace(pt," ")}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type||0>r,s=o?null:[],a=o?r+1:i.length,u=0>r?a:o?r:0;a>u;u++)if(n=i[u],(n.selected||u===r)&&(ie.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!oe.nodeName(n.parentNode,"optgroup"))){if(t=oe(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=oe.makeArray(t),s=r.length;s--;)i=r[s],(i.selected=oe.inArray(oe.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),oe.each(["radio","checkbox"],function(){oe.valHooks[this]={set:function(e,t){return oe.isArray(t)?e.checked=oe.inArray(oe(e).val(),t)>-1:void 0}},ie.checkOn||(oe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var mt=/^(?:focusinfocus|focusoutblur)$/;oe.extend(oe.event,{trigger:function(t,n,i,r){var o,s,a,u,c,l,d,f=[i||Q],h=ne.call(t,"type")?t.type:t,p=ne.call(t,"namespace")?t.namespace.split("."):[];if(s=a=i=i||Q,3!==i.nodeType&&8!==i.nodeType&&!mt.test(h+oe.event.triggered)&&(h.indexOf(".")>-1&&(p=h.split("."),h=p.shift(),p.sort()),c=h.indexOf(":")<0&&"on"+h,t=t[oe.expando]?t:new oe.Event(h,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:oe.makeArray(n,[t]),d=oe.event.special[h]||{},r||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!r&&!d.noBubble&&!oe.isWindow(i)){for(u=d.delegateType||h,mt.test(u+h)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(i.ownerDocument||Q)&&f.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=f[o++])&&!t.isPropagationStopped();)t.type=o>1?u:d.bindType||h,l=(Te.get(s,"events")||{})[t.type]&&Te.get(s,"handle"),l&&l.apply(s,n),l=c&&s[c],l&&l.apply&&ke(s)&&(t.result=l.apply(s,n),t.result===!1&&t.preventDefault());return t.type=h,r||t.isDefaultPrevented()||d._default&&d._default.apply(f.pop(),n)!==!1||!ke(i)||c&&oe.isFunction(i[h])&&!oe.isWindow(i)&&(a=i[c],a&&(i[c]=null),oe.event.triggered=h,i[h](),oe.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(e,t,n){var i=oe.extend(new oe.Event,n,{type:e,isSimulated:!0});oe.event.trigger(i,null,t),i.isDefaultPrevented()&&n.preventDefault()}}),oe.fn.extend({trigger:function(e,t){return this.each(function(){oe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?oe.event.trigger(e,t,n,!0):void 0}}),oe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){oe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),oe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ie.focusin="onfocusin"in e,ie.focusin||oe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){oe.event.simulate(t,e.target,oe.event.fix(e))};oe.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Te.access(i,t);r||i.addEventListener(e,n,!0),Te.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Te.access(i,t)-1;r?Te.access(i,t,r):(i.removeEventListener(e,n,!0),Te.remove(i,t))}}});var gt=e.location,vt=oe.now(),yt=/\?/;oe.parseJSON=function(e){return JSON.parse(e+"")},oe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(i){n=void 0}return(!n||n.getElementsByTagName("parsererror").length)&&oe.error("Invalid XML: "+t),n};var xt=/#.*$/,bt=/([?&])_=[^&]*/,wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,_t=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,St=/^(?:GET|HEAD)$/,kt=/^\/\//,Tt={},Ct={},Dt="*/".concat("*"),Mt=Q.createElement("a");Mt.href=gt.href,oe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:gt.href,type:"GET",isLocal:_t.test(gt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Dt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":oe.parseJSON,"text xml":oe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?G(G(e,oe.ajaxSettings),t):G(oe.ajaxSettings,e)},ajaxPrefilter:I(Tt),ajaxTransport:I(Ct),ajax:function(t,n){function i(t,n,i,a){var c,d,y,x,w,S=n;2!==b&&(b=2,u&&e.clearTimeout(u),r=void 0,s=a||"",_.readyState=t>0?4:0,c=t>=200&&300>t||304===t,i&&(x=U(f,_,i)),x=B(f,x,_,c),c?(f.ifModified&&(w=_.getResponseHeader("Last-Modified"),w&&(oe.lastModified[o]=w),w=_.getResponseHeader("etag"),w&&(oe.etag[o]=w)),204===t||"HEAD"===f.type?S="nocontent":304===t?S="notmodified":(S=x.state,d=x.data,y=x.error,c=!y)):(y=S,(t||!S)&&(S="error",0>t&&(t=0))),_.status=t,_.statusText=(n||S)+"",c?m.resolveWith(h,[d,S,_]):m.rejectWith(h,[_,S,y]),_.statusCode(v),v=void 0,l&&p.trigger(c?"ajaxSuccess":"ajaxError",[_,f,c?d:y]),g.fireWith(h,[_,S]),l&&(p.trigger("ajaxComplete",[_,f]),--oe.active||oe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,s,a,u,c,l,d,f=oe.ajaxSetup({},n),h=f.context||f,p=f.context&&(h.nodeType||h.jquery)?oe(h):oe.event,m=oe.Deferred(),g=oe.Callbacks("once memory"),v=f.statusCode||{},y={},x={},b=0,w="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!a)for(a={};t=wt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=x[n]=x[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)v[t]=[v[t],e[t]];else _.always(e[_.status]);return this},abort:function(e){var t=e||w;return r&&r.abort(t),i(0,t),this}};if(m.promise(_).complete=g.add,_.success=_.done,_.error=_.fail,f.url=((t||f.url||gt.href)+"").replace(xt,"").replace(kt,gt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=oe.trim(f.dataType||"*").toLowerCase().match(we)||[""],null==f.crossDomain){c=Q.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=Mt.protocol+"//"+Mt.host!=c.protocol+"//"+c.host}catch(S){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=oe.param(f.data,f.traditional)),F(Tt,f,n,_),2===b)return _;l=oe.event&&f.global,l&&0===oe.active++&&oe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!St.test(f.type),o=f.url,f.hasContent||(f.data&&(o=f.url+=(yt.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=bt.test(o)?o.replace(bt,"$1_="+vt++):o+(yt.test(o)?"&":"?")+"_="+vt++)),f.ifModified&&(oe.lastModified[o]&&_.setRequestHeader("If-Modified-Since",oe.lastModified[o]),oe.etag[o]&&_.setRequestHeader("If-None-Match",oe.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||n.contentType)&&_.setRequestHeader("Content-Type",f.contentType),_.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Dt+"; q=0.01":""):f.accepts["*"]);for(d in f.headers)_.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(f.beforeSend.call(h,_,f)===!1||2===b))return _.abort();w="abort";for(d in{success:1,error:1,complete:1})_[d](f[d]);if(r=F(Ct,f,n,_)){if(_.readyState=1,l&&p.trigger("ajaxSend",[_,f]),2===b)return _;f.async&&f.timeout>0&&(u=e.setTimeout(function(){_.abort("timeout")},f.timeout));try{b=1,r.send(y,i)}catch(S){if(!(2>b))throw S;i(-1,S)}}else i(-1,"No Transport");return _},getJSON:function(e,t,n){return oe.get(e,t,n,"json")},getScript:function(e,t){return oe.get(e,void 0,t,"script")}}),oe.each(["get","post"],function(e,t){oe[t]=function(e,n,i,r){return oe.isFunction(n)&&(r=r||i,i=n,n=void 0),oe.ajax(oe.extend({url:e,type:t,dataType:r,data:n,success:i},oe.isPlainObject(e)&&e))}}),oe._evalUrl=function(e){return oe.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},oe.fn.extend({wrapAll:function(e){var t;return oe.isFunction(e)?this.each(function(t){oe(this).wrapAll(e.call(this,t))}):(this[0]&&(t=oe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return oe.isFunction(e)?this.each(function(t){oe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=oe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=oe.isFunction(e);return this.each(function(n){oe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){oe.nodeName(this,"body")||oe(this).replaceWith(this.childNodes);
}).end()}}),oe.expr.filters.hidden=function(e){return!oe.expr.filters.visible(e)},oe.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var Et=/%20/g,Nt=/\[\]$/,Ot=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,qt=/^(?:input|select|textarea|keygen)/i;oe.param=function(e,t){var n,i=[],r=function(e,t){t=oe.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=oe.ajaxSettings&&oe.ajaxSettings.traditional),oe.isArray(e)||e.jquery&&!oe.isPlainObject(e))oe.each(e,function(){r(this.name,this.value)});else for(n in e)z(n,e[n],t,r);return i.join("&").replace(Et,"+")},oe.fn.extend({serialize:function(){return oe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=oe.prop(this,"elements");return e?oe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!oe(this).is(":disabled")&&qt.test(this.nodeName)&&!At.test(e)&&(this.checked||!qe.test(e))}).map(function(e,t){var n=oe(this).val();return null==n?null:oe.isArray(n)?oe.map(n,function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}}):{name:t.name,value:n.replace(Ot,"\r\n")}}).get()}}),oe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var jt={0:200,1223:204},Pt=oe.ajaxSettings.xhr();ie.cors=!!Pt&&"withCredentials"in Pt,ie.ajax=Pt=!!Pt,oe.ajaxTransport(function(t){var n,i;return ie.cors||Pt&&!t.crossDomain?{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);n=function(e){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(jt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(u){if(n)throw u}},abort:function(){n&&n()}}:void 0}),oe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return oe.globalEval(e),e}}}),oe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),oe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=oe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),Q.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Lt=[],Yt=/(=)\?(?=&|$)|\?\?/;oe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Lt.pop()||oe.expando+"_"+vt++;return this[e]=!0,e}}),oe.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,s,a=t.jsonp!==!1&&(Yt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(r=t.jsonpCallback=oe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Yt,"$1"+r):t.jsonp!==!1&&(t.url+=(yt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||oe.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){s=arguments},i.always(function(){void 0===o?oe(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Lt.push(r)),s&&oe.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),oe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||Q;var i=pe.exec(e),r=!n&&[];return i?[t.createElement(i[1])]:(i=f([e],t,r),r&&r.length&&oe(r).remove(),oe.merge([],i.childNodes))};var Ht=oe.fn.load;oe.fn.load=function(e,t,n){if("string"!=typeof e&&Ht)return Ht.apply(this,arguments);var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=oe.trim(e.slice(a)),e=e.slice(0,a)),oe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&oe.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?oe("<div>").append(oe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},oe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){oe.fn[t]=function(e){return this.on(t,e)}}),oe.expr.filters.animated=function(e){return oe.grep(oe.timers,function(t){return e===t.elem}).length},oe.offset={setOffset:function(e,t,n){var i,r,o,s,a,u,c,l=oe.css(e,"position"),d=oe(e),f={};"static"===l&&(e.style.position="relative"),a=d.offset(),o=oe.css(e,"top"),u=oe.css(e,"left"),c=("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1,c?(i=d.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),oe.isFunction(t)&&(t=t.call(e,n,oe.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):d.css(f)}},oe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){oe.offset.setOffset(this,e,t)});var t,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;if(o)return t=o.documentElement,oe.contains(t,i)?(r=i.getBoundingClientRect(),n=$(o),{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}):r},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===oe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),oe.nodeName(e[0],"html")||(i=e.offset()),i.top+=oe.css(e[0],"borderTopWidth",!0),i.left+=oe.css(e[0],"borderLeftWidth",!0)),{top:t.top-i.top-oe.css(n,"marginTop",!0),left:t.left-i.left-oe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===oe.css(e,"position");)e=e.offsetParent;return e||Je})}}),oe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;oe.fn[e]=function(i){return Se(this,function(e,i,r){var o=$(e);return void 0===r?o?o[t]:e[i]:void(o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r)},e,i,arguments.length)}}),oe.each(["top","left"],function(e,t){oe.cssHooks[t]=D(ie.pixelPosition,function(e,n){return n?(n=C(e,t),Qe.test(n)?oe(e).position()[t]+"px":n):void 0})}),oe.each({Height:"height",Width:"width"},function(e,t){oe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){oe.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||r===!0?"margin":"border");return Se(this,function(t,n,i){var r;return oe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?oe.css(t,n,s):oe.style(t,n,i,s)},t,o?i:void 0,o,null)}})}),oe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),oe.fn.andSelf=oe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return oe});var Wt=e.jQuery,Rt=e.$;return oe.noConflict=function(t){return e.$===oe&&(e.$=Rt),t&&e.jQuery===oe&&(e.jQuery=Wt),oe},t||(e.jQuery=e.$=oe),oe}),function(e,t){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",t):"object"==typeof module&&module.exports?module.exports=t():e.EvEmitter=t()}(this,function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},i=n[e]=n[e]||[];return-1==i.indexOf(t)&&i.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{},i=n[e]=n[e]||[];return i[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var i=n.indexOf(t);return-1!=i&&n.splice(i,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var i=0,r=n[i];t=t||[];for(var o=this._onceEvents&&this._onceEvents[e];r;){var s=o&&o[r];s&&(this.off(e,r),delete o[r]),r.apply(this,t),i+=s?0:1,r=n[i]}return this}},e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("imagesloaded",["ev-emitter/ev-emitter"],function(n){return t(e,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("ev-emitter")):e.imagesLoaded=t(e,e.EvEmitter)}(window,function(e,t){function n(e,t){for(var n in t)e[n]=t[n];return e}function i(e){var t=[];if(Array.isArray(e))t=e;else if("number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function r(e,t,o){return this instanceof r?("string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=i(e),this.options=n({},this.options),"function"==typeof t?o=t:n(this.options,t),o&&this.on("always",o),this.getImages(),a&&(this.jqDeferred=new a.Deferred),void setTimeout(function(){this.check()}.bind(this))):new r(e,t,o)}function o(e){this.img=e}function s(e,t){this.url=e,this.element=t,this.img=new Image}var a=e.jQuery,u=e.console;r.prototype=Object.create(t.prototype),r.prototype.options={},r.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},r.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&c[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var o=e.querySelectorAll(this.options.background);for(i=0;i<o.length;i++){var s=o[i];this.addElementBackgroundImages(s)}}}};var c={1:!0,9:!0,11:!0};return r.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var n=/url\((['"])?(.*?)\1\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[2];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}},r.prototype.addImage=function(e){var t=new o(e);this.images.push(t)},r.prototype.addBackground=function(e,t){var n=new s(e,t);this.images.push(n)},r.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(t){t.once("progress",e),t.check()}):void this.complete()},r.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,t]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&u&&u.log("progress: "+n,e,t)},r.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},o.prototype=Object.create(t.prototype),o.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},o.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},o.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.img,t])},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},o.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},o.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype=Object.create(o.prototype),s.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},s.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.element,t])},r.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(a=t,a.fn.imagesLoaded=function(e,t){var n=new r(this,e,t);return n.jqDeferred.promise(a(this))})},r.makeJQueryPlugin(),r}),define("paging",["jquery"],function(e){"use strict";var t="pagingBeforeHideCallbacks",n="pagingBeforeShowCallbacks",i="pagingAfterHideCallbacks",r="pagingAfterShowCallbacks",o="pagingChildInstance",s="pagingOpen",a=200;return function(e){var u=function(t){return e.filter("div#"+t)},c=function(){return e.filter("div."+s)},l=function(e,t){var n=e.data(t);if(void 0!==n)for(var i=0;i<n.length;i++)n[i]();var r=e.data(o);if(void 0!==r){var s=r._getOpenPage();r._callCallbacks(s,t)}},d=function(o,d){function f(){p.show(),l(h,i),l(p,r)}var h=c(),p=u(o);void 0===d&&h.is(":hidden")&&(d=!0),h.removeClass(s),p.addClass(s),l(h,t),l(p,n),e.stop(),d?(h.hide(),f()):h.fadeOut({complete:f,duration:a})},f=function(t,n,i){var r=e.filter("div#"+t),o=r.data(n);void 0===o&&(o=[]),o.push(i),r.data(n,o)},h=function(t,n){e.filter("div#"+t).data(o,n)};return e.hide(),e.first().addClass(s).show(),{switchToPage:d,addBeforeHideCallback:function(e,n){f(e,t,n)},addBeforeShowCallback:function(e,t){f(e,n,t)},addAfterHideCallback:function(e,t){f(e,i,t)},addAfterShowCallback:function(e,t){f(e,r,t)},attachChildPaging:h,_getOpenPage:c,_callCallbacks:l}}}),define("animations",["jquery"],function(e){"use strict";function t(e,t,n){function i(t){r=t,n(e,d,r,c)}var r=u.PLAYING,c=0,l=0;this.updateProgress=function(t){c=t,n(e,d,r,c)},this.runWinAnimation=function(n){clearTimeout(l),i(u.RAISING),l=setTimeout(function(){i(u.SMASHING),l=setTimeout(function(){e.hide(),t.show(),void 0!==n&&n()},1e3*a)},1e3*s)},this.runLoseAnimation=function(t){clearTimeout(l),i(u.LOSING),l=setTimeout(function(){e.hide(),void 0!==t&&t()},1e3*o)},this.reset=function(){c=0,i(u.PLAYING),e.show(),t.hide()},this.attachResizeHandler=function(){h.on("resize",n)},this.detachResizeHandler=function(){h.off("resize",n)}}var n=20,i=100,r=.2,o=1,s=1.3,a=.2,u={PLAYING:0,LOSING:1,RAISING:2,SMASHING:3},c=e("#unsmashed"),l=e("#smashed"),d=e("#gameContainer"),f=e("#flash"),h=e(window),p=0,m=new t(e("#yourHand"),e("#yourSmasher"),function(e,t,i,c){var l,d,f,p;switch(i){case u.PLAYING:l=t.height()-e.height(),f=-l*c,d=-(e.width()/4)*c,p=-n*c,e.css({transform:"translate("+d+"px, "+f+"px) rotate("+p+"deg)",transition:"transform "+r+"s ease-in"});break;case u.LOSING:f=.3*h.height()+e.height(),e.css({transform:"translate(0, "+f+"px)",transition:"transform "+o+"s ease-out"});break;case u.RAISING:f=-(t.height()-e.height()/2),d=-e.width()/2,e.css({transform:"translate("+d+"px, "+f+"px) rotate("+-n+"deg)",transition:"transform "+s+"s ease-in"});break;case u.SMASHING:f=-(t.height()/2-e.height()/2),d=t.width()/2-e.width()/2,e.css({transform:"translate("+d+"px, "+f+"px)",transition:"transform "+a+"s ease-out"})}}),g=new t(e("#theirHand"),e("#theirSmasher"),function(e,t,i,c){var l,d,f,p,m=.25;switch(i){case u.PLAYING:l=t.height()*(1-m)-e.height(),f=-l*c,d=e.width()/4*c,p=n*c,e.css({transform:"translate("+d+"px, "+f+"px) rotate("+p+"deg)",transition:"transform "+r+"s ease-in"});break;case u.LOSING:f=.3*h.height()+e.height(),e.css({transform:"translate(0, "+f+"px)",transition:"transform "+o+"s ease-out"});break;case u.RAISING:f=-(t.height()-e.height()/2),d=e.width()/2,e.css({transform:"translate("+d+"px, "+f+"px) rotate("+n+"deg)",transition:"transform "+s+"s ease-in"});break;case u.SMASHING:f=-(t.height()/2-t.height()*m-e.height()/2),d=-(t.width()/2-e.width()/2),e.css({transform:"translate("+d+"px, "+f+"px)",transition:"transform "+a+"s ease-out"})}});return{updateYourProgress:m.updateProgress,updateTheirProgress:g.updateProgress,gameOver:function(e,t){e?(g.runLoseAnimation(),m.runWinAnimation(function(){c.hide(),l.show(),void 0!==t&&t()})):(m.runLoseAnimation(),g.runWinAnimation(function(){c.hide(),l.show(),void 0!==t&&t()}))},reset:function(){m.reset(),g.reset(),l.hide(),c.show()},flash:function(){clearTimeout(p),f.show(),p=setTimeout(function(){f.hide()},i)},attachResizeHandler:function(){m.attachResizeHandler(),g.attachResizeHandler()},detachResizeHandler:function(){m.detachResizeHandler(),g.detachResizeHandler()}}}),define("messages",[],function(){var e={Matched:0,CountDown:1,Click:2,GameOver:3,Name:4,NamePlease:5,ClickCount:6,WinCount:7},t=function(t){this.id=e[t]},n=function(e){t.call(this,"WinCount"),this.count=e},i=function(){t.call(this,"NamePlease")},r=function(e){t.call(this,"Name"),this.name=e},o=function(e){t.call(this,"Matched"),this.opponentName=e},s=function(e){t.call(this,"CountDown"),this.value=e},a=function(){t.call(this,"Click")},u=function(e,n){t.call(this,"ClickCount"),this.yourCount=e,this.theirCount=n},c=function(e){t.call(this,"GameOver"),this.won=e};return{Matched:o,CountDown:s,Click:a,GameOver:c,Name:r,NamePlease:i,ClickCount:u,WinCount:n,ids:e}}),define("client2Server",["messages"],function(e){"use strict";return function(t){if(!window.WebSocket)throw log("WebSockets are not supported.",logging.ERROR),new Error("WebSockets are not supported.");var n=this,i=new WebSocket(t,["wishbanana"]),r=function(e){void 0!==n[e]&&n[e].apply(this,Array.prototype.slice.call(arguments,1))},o=function(e){i.send(JSON.stringify(e))};i.onopen=function(){r("onConnected")},i.onmessage=function(t){var n;try{n=JSON.parse(t.data)}catch(i){return void r("onError",t.data)}var o=n.id;o===e.ids.WinCount?r("onWinCount",n.count):o===e.ids.NamePlease?r("onNamePlease"):o===e.ids.Matched?r("onMatched",n.opponentName):o===e.ids.CountDown?r("onCountDown",n.value):o===e.ids.ClickCount?r("onClickCount",n.yourCount,n.theirCount):o===e.ids.GameOver?r("onGameOver",n.won):r("onError",t.data)},i.onclose=function(e){r("onClose",e.code,e.reason)},this.name=function(t){o(new e.Name(t))},this.click=function(){o(new e.Click)},this.close=function(){i.close()},this.onConnected=void 0,this.onWinCount=void 0,this.onMessage=void 0,this.onNamePlease=void 0,this.onMatched=void 0,this.onOpponentName=void 0,this.onCountDown=void 0,this.onClickCount=void 0,this.onGameOver=void 0,this.onError=void 0,this.onClose=void 0}}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define("moment",t):e.moment=t()}(this,function(){"use strict";function e(){return Jn.apply(null,arguments)}function t(e){Jn=e}function n(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function r(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function s(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function a(e,t,n,i){return je(e,t,n,i,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function c(e){return null==e._pf&&(e._pf=u()),e._pf}function l(e){if(null==e._isValid){var t=c(e);e._isValid=!(isNaN(e._d.getTime())||!(t.overflow<0)||t.empty||t.invalidMonth||t.invalidWeekday||t.nullInput||t.invalidFormat||t.userInvalidated),e._strict&&(e._isValid=e._isValid&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)}return e._isValid}function d(e){var t=a(NaN);return null!=e?s(c(t),e):c(t).userInvalidated=!0,t}function f(e){return void 0===e}function h(e,t){var n,i,r;if(f(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),f(t._i)||(e._i=t._i),f(t._f)||(e._f=t._f),f(t._l)||(e._l=t._l),f(t._strict)||(e._strict=t._strict),f(t._tzm)||(e._tzm=t._tzm),f(t._isUTC)||(e._isUTC=t._isUTC),f(t._offset)||(e._offset=t._offset),f(t._pf)||(e._pf=c(t)),f(t._locale)||(e._locale=t._locale),Kn.length>0)for(n in Kn)i=Kn[n],r=t[i],f(r)||(e[i]=r);return e}function p(t){h(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),ei===!1&&(ei=!0,e.updateOffset(this),ei=!1)}function m(e){return e instanceof p||null!=e&&null!=e._isAMomentObject}function g(e){return 0>e?Math.ceil(e):Math.floor(e)}function v(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=g(t)),n}function y(e,t,n){var i,r=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),s=0;for(i=0;r>i;i++)(n&&e[i]!==t[i]||!n&&v(e[i])!==v(t[i]))&&s++;return s+o}function x(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function b(e,t){var n=!0;return s(function(){return n&&(x(e+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),n=!1),t.apply(this,arguments)},t)}function w(e,t){ti[e]||(x(t),ti[e]=!0)}function _(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function S(e){return"[object Object]"===Object.prototype.toString.call(e)}function k(e){var t,n;for(n in e)t=e[n],_(t)?this[n]=t:this["_"+n]=t;this._config=e,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function T(e,t){var n,i=s({},e);for(n in t)o(t,n)&&(S(e[n])&&S(t[n])?(i[n]={},s(i[n],e[n]),s(i[n],t[n])):null!=t[n]?i[n]=t[n]:delete i[n]);return i}function C(e){null!=e&&this.set(e)}function D(e){return e?e.toLowerCase().replace("_","-"):e}function M(e){for(var t,n,i,r,o=0;o<e.length;){for(r=D(e[o]).split("-"),t=r.length,n=D(e[o+1]),n=n?n.split("-"):null;t>0;){if(i=E(r.slice(0,t).join("-")))return i;if(n&&n.length>=t&&y(r,n,!0)>=t-1)break;t--}o++}return null}function E(e){var t=null;if(!ii[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=ni._abbr,require("./locale/"+e),N(t)}catch(n){}return ii[e]}function N(e,t){var n;return e&&(n=f(t)?q(e):O(e,t),n&&(ni=n)),ni._abbr}function O(e,t){return null!==t?(t.abbr=e,null!=ii[e]?(w("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),t=T(ii[e]._config,t)):null!=t.parentLocale&&(null!=ii[t.parentLocale]?t=T(ii[t.parentLocale]._config,t):w("parentLocaleUndefined","specified parentLocale is not defined yet")),ii[e]=new C(t),N(e),ii[e]):(delete ii[e],null)}function A(e,t){if(null!=t){var n;null!=ii[e]&&(t=T(ii[e]._config,t)),n=new C(t),n.parentLocale=ii[e],ii[e]=n,N(e)}else null!=ii[e]&&(null!=ii[e].parentLocale?ii[e]=ii[e].parentLocale:null!=ii[e]&&delete ii[e]);return ii[e]}function q(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ni;if(!n(e)){if(t=E(e))return t;e=[e]}return M(e)}function j(){return Object.keys(ii)}function P(e,t){var n=e.toLowerCase();ri[n]=ri[n+"s"]=ri[t]=e}function L(e){return"string"==typeof e?ri[e]||ri[e.toLowerCase()]:void 0}function Y(e){var t,n,i={};for(n in e)o(e,n)&&(t=L(n),t&&(i[t]=e[n]));return i}function H(t,n){return function(i){return null!=i?(R(this,t,i),e.updateOffset(this,n),this):W(this,t)}}function W(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function R(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function I(e,t){var n;if("object"==typeof e)for(n in e)this.set(n,e[n]);else if(e=L(e),_(this[e]))return this[e](t);return this}function F(e,t,n){var i=""+Math.abs(e),r=t-i.length,o=e>=0;return(o?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}function G(e,t,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),e&&(ui[e]=r),t&&(ui[t[0]]=function(){return F(r.apply(this,arguments),t[1],t[2])}),n&&(ui[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function U(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function B(e){var t,n,i=e.match(oi);for(t=0,n=i.length;n>t;t++)ui[i[t]]?i[t]=ui[i[t]]:i[t]=U(i[t]);return function(r){var o="";for(t=0;n>t;t++)o+=i[t]instanceof Function?i[t].call(r,e):i[t];return o}}function z(e,t){return e.isValid()?(t=$(t,e.localeData()),ai[t]=ai[t]||B(t),ai[t](e)):e.localeData().invalidDate()}function $(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(si.lastIndex=0;i>=0&&si.test(e);)e=e.replace(si,n),si.lastIndex=0,i-=1;return e}function V(e,t,n){Ci[e]=_(t)?t:function(e,i){return e&&n?n:t}}function Q(e,t){return o(Ci,e)?Ci[e](t._strict,t._locale):new RegExp(X(e))}function X(e){return Z(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,r){return t||n||i||r}))}function Z(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function J(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),"number"==typeof t&&(i=function(e,n){n[t]=v(e)}),n=0;n<e.length;n++)Di[e[n]]=i}function K(e,t){J(e,function(e,n,i,r){i._w=i._w||{},t(e,i._w,i,r)})}function ee(e,t,n){null!=t&&o(Di,e)&&Di[e](t,n._a,n,e)}function te(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function ne(e,t){return n(this._months)?this._months[e.month()]:this._months[Yi.test(t)?"format":"standalone"][e.month()]}function ie(e,t){return n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Yi.test(t)?"format":"standalone"][e.month()]}function re(e,t,n){var i,r,o;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(r=a([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(o="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function oe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=v(t);else if(t=e.localeData().monthsParse(t),"number"!=typeof t)return e;return n=Math.min(e.date(),te(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function se(t){return null!=t?(oe(this,t),e.updateOffset(this,!0),this):W(this,"Month")}function ae(){return te(this.year(),this.month())}function ue(e){return this._monthsParseExact?(o(this,"_monthsRegex")||le.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}function ce(e){return this._monthsParseExact?(o(this,"_monthsRegex")||le.call(this),e?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}function le(){function e(e,t){return t.length-e.length}var t,n,i=[],r=[],o=[];for(t=0;12>t;t++)n=a([2e3,t]),i.push(this.monthsShort(n,"")),r.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(i.sort(e),r.sort(e),o.sort(e),t=0;12>t;t++)i[t]=Z(i[t]),r[t]=Z(r[t]),o[t]=Z(o[t]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")$","i")}function de(e){var t,n=e._a;return n&&-2===c(e).overflow&&(t=n[Ei]<0||n[Ei]>11?Ei:n[Ni]<1||n[Ni]>te(n[Mi],n[Ei])?Ni:n[Oi]<0||n[Oi]>24||24===n[Oi]&&(0!==n[Ai]||0!==n[qi]||0!==n[ji])?Oi:n[Ai]<0||n[Ai]>59?Ai:n[qi]<0||n[qi]>59?qi:n[ji]<0||n[ji]>999?ji:-1,c(e)._overflowDayOfYear&&(Mi>t||t>Ni)&&(t=Ni),c(e)._overflowWeeks&&-1===t&&(t=Pi),c(e)._overflowWeekday&&-1===t&&(t=Li),c(e).overflow=t),e}function fe(e){var t,n,i,r,o,s,a=e._i,u=Fi.exec(a)||Gi.exec(a);if(u){for(c(e).iso=!0,t=0,n=Bi.length;n>t;t++)if(Bi[t][1].exec(u[1])){r=Bi[t][0],i=Bi[t][2]!==!1;break}if(null==r)return void(e._isValid=!1);if(u[3]){for(t=0,n=zi.length;n>t;t++)if(zi[t][1].exec(u[3])){o=(u[2]||" ")+zi[t][0];break}if(null==o)return void(e._isValid=!1)}if(!i&&null!=o)return void(e._isValid=!1);if(u[4]){if(!Ui.exec(u[4]))return void(e._isValid=!1);s="Z"}e._f=r+(o||"")+(s||""),De(e)}else e._isValid=!1}function he(t){var n=$i.exec(t._i);return null!==n?void(t._d=new Date(+n[1])):(fe(t),void(t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t))))}function pe(e,t,n,i,r,o,s){var a=new Date(e,t,n,i,r,o,s);return 100>e&&e>=0&&isFinite(a.getFullYear())&&a.setFullYear(e),a}function me(e){var t=new Date(Date.UTC.apply(null,arguments));return 100>e&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ge(e){return ve(e)?366:365}function ve(e){return e%4===0&&e%100!==0||e%400===0}function ye(){return ve(this.year())}function xe(e,t,n){var i=7+t-n,r=(7+me(e,0,i).getUTCDay()-t)%7;return-r+i-1}function be(e,t,n,i,r){var o,s,a=(7+n-i)%7,u=xe(e,i,r),c=1+7*(t-1)+a+u;return 0>=c?(o=e-1,s=ge(o)+c):c>ge(e)?(o=e+1,s=c-ge(e)):(o=e,s=c),{year:o,dayOfYear:s}}function we(e,t,n){var i,r,o=xe(e.year(),t,n),s=Math.floor((e.dayOfYear()-o-1)/7)+1;return 1>s?(r=e.year()-1,i=s+_e(r,t,n)):s>_e(e.year(),t,n)?(i=s-_e(e.year(),t,n),r=e.year()+1):(r=e.year(),i=s),{week:i,year:r}}function _e(e,t,n){var i=xe(e,t,n),r=xe(e+1,t,n);return(ge(e)-i+r)/7}function Se(e,t,n){return null!=e?e:null!=t?t:n}function ke(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function Te(e){var t,n,i,r,o=[];if(!e._d){for(i=ke(e),e._w&&null==e._a[Ni]&&null==e._a[Ei]&&Ce(e),e._dayOfYear&&(r=Se(e._a[Mi],i[Mi]),e._dayOfYear>ge(r)&&(c(e)._overflowDayOfYear=!0),n=me(r,0,e._dayOfYear),e._a[Ei]=n.getUTCMonth(),e._a[Ni]=n.getUTCDate()),t=0;3>t&&null==e._a[t];++t)e._a[t]=o[t]=i[t];for(;7>t;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Oi]&&0===e._a[Ai]&&0===e._a[qi]&&0===e._a[ji]&&(e._nextDay=!0,e._a[Oi]=0),e._d=(e._useUTC?me:pe).apply(null,o),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Oi]=24)}}function Ce(e){var t,n,i,r,o,s,a,u;t=e._w,null!=t.GG||null!=t.W||null!=t.E?(o=1,s=4,n=Se(t.GG,e._a[Mi],we(Pe(),1,4).year),i=Se(t.W,1),r=Se(t.E,1),(1>r||r>7)&&(u=!0)):(o=e._locale._week.dow,s=e._locale._week.doy,n=Se(t.gg,e._a[Mi],we(Pe(),o,s).year),i=Se(t.w,1),null!=t.d?(r=t.d,(0>r||r>6)&&(u=!0)):null!=t.e?(r=t.e+o,(t.e<0||t.e>6)&&(u=!0)):r=o),1>i||i>_e(n,o,s)?c(e)._overflowWeeks=!0:null!=u?c(e)._overflowWeekday=!0:(a=be(n,i,r,o,s),e._a[Mi]=a.year,e._dayOfYear=a.dayOfYear)}function De(t){if(t._f===e.ISO_8601)return void fe(t);t._a=[],c(t).empty=!0;var n,i,r,o,s,a=""+t._i,u=a.length,l=0;for(r=$(t._f,t._locale).match(oi)||[],n=0;n<r.length;n++)o=r[n],i=(a.match(Q(o,t))||[])[0],i&&(s=a.substr(0,a.indexOf(i)),s.length>0&&c(t).unusedInput.push(s),a=a.slice(a.indexOf(i)+i.length),l+=i.length),ui[o]?(i?c(t).empty=!1:c(t).unusedTokens.push(o),ee(o,i,t)):t._strict&&!i&&c(t).unusedTokens.push(o);c(t).charsLeftOver=u-l,a.length>0&&c(t).unusedInput.push(a),c(t).bigHour===!0&&t._a[Oi]<=12&&t._a[Oi]>0&&(c(t).bigHour=void 0),t._a[Oi]=Me(t._locale,t._a[Oi],t._meridiem),Te(t),de(t)}function Me(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(i=e.isPM(n),i&&12>t&&(t+=12),i||12!==t||(t=0),t):t}function Ee(e){var t,n,i,r,o;if(0===e._f.length)return c(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)o=0,
t=h({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],De(t),l(t)&&(o+=c(t).charsLeftOver,o+=10*c(t).unusedTokens.length,c(t).score=o,(null==i||i>o)&&(i=o,n=t));s(e,n||t)}function Ne(e){if(!e._d){var t=Y(e._i);e._a=r([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),Te(e)}}function Oe(e){var t=new p(de(Ae(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function Ae(e){var t=e._i,r=e._f;return e._locale=e._locale||q(e._l),null===t||void 0===r&&""===t?d({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),m(t)?new p(de(t)):(n(r)?Ee(e):r?De(e):i(t)?e._d=t:qe(e),l(e)||(e._d=null),e))}function qe(t){var o=t._i;void 0===o?t._d=new Date(e.now()):i(o)?t._d=new Date(+o):"string"==typeof o?he(t):n(o)?(t._a=r(o.slice(0),function(e){return parseInt(e,10)}),Te(t)):"object"==typeof o?Ne(t):"number"==typeof o?t._d=new Date(o):e.createFromInputFallback(t)}function je(e,t,n,i,r){var o={};return"boolean"==typeof n&&(i=n,n=void 0),o._isAMomentObject=!0,o._useUTC=o._isUTC=r,o._l=n,o._i=e,o._f=t,o._strict=i,Oe(o)}function Pe(e,t,n,i){return je(e,t,n,i,!1)}function Le(e,t){var i,r;if(1===t.length&&n(t[0])&&(t=t[0]),!t.length)return Pe();for(i=t[0],r=1;r<t.length;++r)(!t[r].isValid()||t[r][e](i))&&(i=t[r]);return i}function Ye(){var e=[].slice.call(arguments,0);return Le("isBefore",e)}function He(){var e=[].slice.call(arguments,0);return Le("isAfter",e)}function We(e){var t=Y(e),n=t.year||0,i=t.quarter||0,r=t.month||0,o=t.week||0,s=t.day||0,a=t.hour||0,u=t.minute||0,c=t.second||0,l=t.millisecond||0;this._milliseconds=+l+1e3*c+6e4*u+36e5*a,this._days=+s+7*o,this._months=+r+3*i+12*n,this._data={},this._locale=q(),this._bubble()}function Re(e){return e instanceof We}function Ie(e,t){G(e,0,0,function(){var e=this.utcOffset(),n="+";return 0>e&&(e=-e,n="-"),n+F(~~(e/60),2)+t+F(~~e%60,2)})}function Fe(e,t){var n=(t||"").match(e)||[],i=n[n.length-1]||[],r=(i+"").match(Ji)||["-",0,0],o=+(60*r[1])+v(r[2]);return"+"===r[0]?o:-o}function Ge(t,n){var r,o;return n._isUTC?(r=n.clone(),o=(m(t)||i(t)?+t:+Pe(t))-+r,r._d.setTime(+r._d+o),e.updateOffset(r,!1),r):Pe(t).local()}function Ue(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Be(t,n){var i,r=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=Fe(Si,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&n&&(i=Ue(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==t&&(!n||this._changeInProgress?ut(this,nt(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:Ue(this):null!=t?this:NaN}function ze(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function $e(e){return this.utcOffset(0,e)}function Ve(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ue(this),"m")),this}function Qe(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Fe(_i,this._i)),this}function Xe(e){return this.isValid()?(e=e?Pe(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function Ze(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Je(){if(!f(this._isDSTShifted))return this._isDSTShifted;var e={};if(h(e,this),e=Ae(e),e._a){var t=e._isUTC?a(e._a):Pe(e._a);this._isDSTShifted=this.isValid()&&y(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Ke(){return this.isValid()?!this._isUTC:!1}function et(){return this.isValid()?this._isUTC:!1}function tt(){return this.isValid()?this._isUTC&&0===this._offset:!1}function nt(e,t){var n,i,r,s=e,a=null;return Re(e)?s={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(s={},t?s[t]=e:s.milliseconds=e):(a=Ki.exec(e))?(n="-"===a[1]?-1:1,s={y:0,d:v(a[Ni])*n,h:v(a[Oi])*n,m:v(a[Ai])*n,s:v(a[qi])*n,ms:v(a[ji])*n}):(a=er.exec(e))?(n="-"===a[1]?-1:1,s={y:it(a[2],n),M:it(a[3],n),w:it(a[4],n),d:it(a[5],n),h:it(a[6],n),m:it(a[7],n),s:it(a[8],n)}):null==s?s={}:"object"==typeof s&&("from"in s||"to"in s)&&(r=ot(Pe(s.from),Pe(s.to)),s={},s.ms=r.milliseconds,s.M=r.months),i=new We(s),Re(e)&&o(e,"_locale")&&(i._locale=e._locale),i}function it(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function rt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function ot(e,t){var n;return e.isValid()&&t.isValid()?(t=Ge(t,e),e.isBefore(t)?n=rt(e,t):(n=rt(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function st(e){return 0>e?-1*Math.round(-1*e):Math.round(e)}function at(e,t){return function(n,i){var r,o;return null===i||isNaN(+i)||(w(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period)."),o=n,n=i,i=o),n="string"==typeof n?+n:n,r=nt(n,i),ut(this,r,e),this}}function ut(t,n,i,r){var o=n._milliseconds,s=st(n._days),a=st(n._months);t.isValid()&&(r=null==r?!0:r,o&&t._d.setTime(+t._d+o*i),s&&R(t,"Date",W(t,"Date")+s*i),a&&oe(t,W(t,"Month")+a*i),r&&e.updateOffset(t,s||a))}function ct(e,t){var n=e||Pe(),i=Ge(n,this).startOf("day"),r=this.diff(i,"days",!0),o=-6>r?"sameElse":-1>r?"lastWeek":0>r?"lastDay":1>r?"sameDay":2>r?"nextDay":7>r?"nextWeek":"sameElse",s=t&&(_(t[o])?t[o]():t[o]);return this.format(s||this.localeData().calendar(o,this,Pe(n)))}function lt(){return new p(this)}function dt(e,t){var n=m(e)?e:Pe(e);return this.isValid()&&n.isValid()?(t=L(f(t)?"millisecond":t),"millisecond"===t?+this>+n:+n<+this.clone().startOf(t)):!1}function ft(e,t){var n=m(e)?e:Pe(e);return this.isValid()&&n.isValid()?(t=L(f(t)?"millisecond":t),"millisecond"===t?+n>+this:+this.clone().endOf(t)<+n):!1}function ht(e,t,n){return this.isAfter(e,n)&&this.isBefore(t,n)}function pt(e,t){var n,i=m(e)?e:Pe(e);return this.isValid()&&i.isValid()?(t=L(t||"millisecond"),"millisecond"===t?+this===+i:(n=+i,+this.clone().startOf(t)<=n&&n<=+this.clone().endOf(t))):!1}function mt(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function gt(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function vt(e,t,n){var i,r,o,s;return this.isValid()?(i=Ge(e,this),i.isValid()?(r=6e4*(i.utcOffset()-this.utcOffset()),t=L(t),"year"===t||"month"===t||"quarter"===t?(s=yt(this,i),"quarter"===t?s/=3:"year"===t&&(s/=12)):(o=this-i,s="second"===t?o/1e3:"minute"===t?o/6e4:"hour"===t?o/36e5:"day"===t?(o-r)/864e5:"week"===t?(o-r)/6048e5:o),n?s:g(s)):NaN):NaN}function yt(e,t){var n,i,r=12*(t.year()-e.year())+(t.month()-e.month()),o=e.clone().add(r,"months");return 0>t-o?(n=e.clone().add(r-1,"months"),i=(t-o)/(o-n)):(n=e.clone().add(r+1,"months"),i=(t-o)/(n-o)),-(r+i)}function xt(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function bt(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?_(Date.prototype.toISOString)?this.toDate().toISOString():z(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):z(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function wt(t){var n=z(this,t||e.defaultFormat);return this.localeData().postformat(n)}function _t(e,t){return this.isValid()&&(m(e)&&e.isValid()||Pe(e).isValid())?nt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function St(e){return this.from(Pe(),e)}function kt(e,t){return this.isValid()&&(m(e)&&e.isValid()||Pe(e).isValid())?nt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function Tt(e){return this.to(Pe(),e)}function Ct(e){var t;return void 0===e?this._locale._abbr:(t=q(e),null!=t&&(this._locale=t),this)}function Dt(){return this._locale}function Mt(e){switch(e=L(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function Et(e){return e=L(e),void 0===e||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")}function Nt(){return+this._d-6e4*(this._offset||0)}function Ot(){return Math.floor(+this/1e3)}function At(){return this._offset?new Date(+this):this._d}function qt(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function jt(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Pt(){return this.isValid()?this.toISOString():null}function Lt(){return l(this)}function Yt(){return s({},c(this))}function Ht(){return c(this).overflow}function Wt(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Rt(e,t){G(0,[e,e.length],0,t)}function It(e){return Bt.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Ft(e){return Bt.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Gt(){return _e(this.year(),1,4)}function Ut(){var e=this.localeData()._week;return _e(this.year(),e.dow,e.doy)}function Bt(e,t,n,i,r){var o;return null==e?we(this,i,r).year:(o=_e(e,i,r),t>o&&(t=o),zt.call(this,e,t,n,i,r))}function zt(e,t,n,i,r){var o=be(e,t,n,i,r),s=me(o.year,0,o.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}function $t(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Vt(e){return we(e,this._week.dow,this._week.doy).week}function Qt(){return this._week.dow}function Xt(){return this._week.doy}function Zt(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Jt(e){var t=we(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function Kt(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function en(e,t){return n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}function tn(e){return this._weekdaysShort[e.day()]}function nn(e){return this._weekdaysMin[e.day()]}function rn(e,t,n){var i,r,o;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;7>i;i++){if(r=Pe([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(o="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[i]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}}function on(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Kt(e,this.localeData()),this.add(e-t,"d")):t}function sn(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function an(e){return this.isValid()?null==e?this.day()||7:this.day(this.day()%7?e:e-7):null!=e?this:NaN}function un(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function cn(){return this.hours()%12||12}function ln(e,t){G(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function dn(e,t){return t._meridiemParse}function fn(e){return"p"===(e+"").toLowerCase().charAt(0)}function hn(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function pn(e,t){t[ji]=v(1e3*("0."+e))}function mn(){return this._isUTC?"UTC":""}function gn(){return this._isUTC?"Coordinated Universal Time":""}function vn(e){return Pe(1e3*e)}function yn(){return Pe.apply(null,arguments).parseZone()}function xn(e,t,n){var i=this._calendar[e];return _(i)?i.call(t,n):i}function bn(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function wn(){return this._invalidDate}function _n(e){return this._ordinal.replace("%d",e)}function Sn(e){return e}function kn(e,t,n,i){var r=this._relativeTime[n];return _(r)?r(e,t,n,i):r.replace(/%d/i,e)}function Tn(e,t){var n=this._relativeTime[e>0?"future":"past"];return _(n)?n(t):n.replace(/%s/i,t)}function Cn(e,t,n,i){var r=q(),o=a().set(i,t);return r[n](o,e)}function Dn(e,t,n,i,r){if("number"==typeof e&&(t=e,e=void 0),e=e||"",null!=t)return Cn(e,t,n,r);var o,s=[];for(o=0;i>o;o++)s[o]=Cn(e,o,n,r);return s}function Mn(e,t){return Dn(e,t,"months",12,"month")}function En(e,t){return Dn(e,t,"monthsShort",12,"month")}function Nn(e,t){return Dn(e,t,"weekdays",7,"day")}function On(e,t){return Dn(e,t,"weekdaysShort",7,"day")}function An(e,t){return Dn(e,t,"weekdaysMin",7,"day")}function qn(){var e=this._data;return this._milliseconds=kr(this._milliseconds),this._days=kr(this._days),this._months=kr(this._months),e.milliseconds=kr(e.milliseconds),e.seconds=kr(e.seconds),e.minutes=kr(e.minutes),e.hours=kr(e.hours),e.months=kr(e.months),e.years=kr(e.years),this}function jn(e,t,n,i){var r=nt(t,n);return e._milliseconds+=i*r._milliseconds,e._days+=i*r._days,e._months+=i*r._months,e._bubble()}function Pn(e,t){return jn(this,e,t,1)}function Ln(e,t){return jn(this,e,t,-1)}function Yn(e){return 0>e?Math.floor(e):Math.ceil(e)}function Hn(){var e,t,n,i,r,o=this._milliseconds,s=this._days,a=this._months,u=this._data;return o>=0&&s>=0&&a>=0||0>=o&&0>=s&&0>=a||(o+=864e5*Yn(Rn(a)+s),s=0,a=0),u.milliseconds=o%1e3,e=g(o/1e3),u.seconds=e%60,t=g(e/60),u.minutes=t%60,n=g(t/60),u.hours=n%24,s+=g(n/24),r=g(Wn(s)),a+=r,s-=Yn(Rn(r)),i=g(a/12),a%=12,u.days=s,u.months=a,u.years=i,this}function Wn(e){return 4800*e/146097}function Rn(e){return 146097*e/4800}function In(e){var t,n,i=this._milliseconds;if(e=L(e),"month"===e||"year"===e)return t=this._days+i/864e5,n=this._months+Wn(t),"month"===e?n:n/12;switch(t=this._days+Math.round(Rn(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function Fn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*v(this._months/12)}function Gn(e){return function(){return this.as(e)}}function Un(e){return e=L(e),this[e+"s"]()}function Bn(e){return function(){return this._data[e]}}function zn(){return g(this.days()/7)}function $n(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}function Vn(e,t,n){var i=nt(e).abs(),r=Rr(i.as("s")),o=Rr(i.as("m")),s=Rr(i.as("h")),a=Rr(i.as("d")),u=Rr(i.as("M")),c=Rr(i.as("y")),l=r<Ir.s&&["s",r]||1>=o&&["m"]||o<Ir.m&&["mm",o]||1>=s&&["h"]||s<Ir.h&&["hh",s]||1>=a&&["d"]||a<Ir.d&&["dd",a]||1>=u&&["M"]||u<Ir.M&&["MM",u]||1>=c&&["y"]||["yy",c];return l[2]=t,l[3]=+e>0,l[4]=n,$n.apply(null,l)}function Qn(e,t){return void 0===Ir[e]?!1:void 0===t?Ir[e]:(Ir[e]=t,!0)}function Xn(e){var t=this.localeData(),n=Vn(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function Zn(){var e,t,n,i=Fr(this._milliseconds)/1e3,r=Fr(this._days),o=Fr(this._months);e=g(i/60),t=g(e/60),i%=60,e%=60,n=g(o/12),o%=12;var s=n,a=o,u=r,c=t,l=e,d=i,f=this.asSeconds();return f?(0>f?"-":"")+"P"+(s?s+"Y":"")+(a?a+"M":"")+(u?u+"D":"")+(c||l||d?"T":"")+(c?c+"H":"")+(l?l+"M":"")+(d?d+"S":""):"P0D"}var Jn,Kn=e.momentProperties=[],ei=!1,ti={};e.suppressDeprecationWarnings=!1;var ni,ii={},ri={},oi=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,si=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,ai={},ui={},ci=/\d/,li=/\d\d/,di=/\d{3}/,fi=/\d{4}/,hi=/[+-]?\d{6}/,pi=/\d\d?/,mi=/\d\d\d\d?/,gi=/\d\d\d\d\d\d?/,vi=/\d{1,3}/,yi=/\d{1,4}/,xi=/[+-]?\d{1,6}/,bi=/\d+/,wi=/[+-]?\d+/,_i=/Z|[+-]\d\d:?\d\d/gi,Si=/Z|[+-]\d\d(?::?\d\d)?/gi,ki=/[+-]?\d+(\.\d{1,3})?/,Ti=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ci={},Di={},Mi=0,Ei=1,Ni=2,Oi=3,Ai=4,qi=5,ji=6,Pi=7,Li=8;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),G("MMMM",0,0,function(e){return this.localeData().months(this,e)}),P("month","M"),V("M",pi),V("MM",pi,li),V("MMM",function(e,t){return t.monthsShortRegex(e)}),V("MMMM",function(e,t){return t.monthsRegex(e)}),J(["M","MM"],function(e,t){t[Ei]=v(e)-1}),J(["MMM","MMMM"],function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);null!=r?t[Ei]=r:c(n).invalidMonth=e});var Yi=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Hi="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Wi="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Ri=Ti,Ii=Ti,Fi=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Gi=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Ui=/Z|[+-]\d\d(?::?\d\d)?/,Bi=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],zi=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],$i=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=b("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),G("Y",0,0,function(){var e=this.year();return 9999>=e?""+e:"+"+e}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),P("year","y"),V("Y",wi),V("YY",pi,li),V("YYYY",yi,fi),V("YYYYY",xi,hi),V("YYYYYY",xi,hi),J(["YYYYY","YYYYYY"],Mi),J("YYYY",function(t,n){n[Mi]=2===t.length?e.parseTwoDigitYear(t):v(t)}),J("YY",function(t,n){n[Mi]=e.parseTwoDigitYear(t)}),J("Y",function(e,t){t[Mi]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return v(e)+(v(e)>68?1900:2e3)};var Vi=H("FullYear",!1);e.ISO_8601=function(){};var Qi=b("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var e=Pe.apply(null,arguments);return this.isValid()&&e.isValid()?this>e?this:e:d()}),Xi=b("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var e=Pe.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:d()}),Zi=function(){return Date.now?Date.now():+new Date};Ie("Z",":"),Ie("ZZ",""),V("Z",Si),V("ZZ",Si),J(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Fe(Si,e)});var Ji=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var Ki=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,er=/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;nt.fn=We.prototype;var tr=at(1,"add"),nr=at(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var ir=b("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Rt("gggg","weekYear"),Rt("ggggg","weekYear"),Rt("GGGG","isoWeekYear"),Rt("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),V("G",wi),V("g",wi),V("GG",pi,li),V("gg",pi,li),V("GGGG",yi,fi),V("gggg",yi,fi),V("GGGGG",xi,hi),V("ggggg",xi,hi),K(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=v(e)}),K(["gg","GG"],function(t,n,i,r){n[r]=e.parseTwoDigitYear(t)}),G("Q",0,"Qo","quarter"),P("quarter","Q"),V("Q",ci),J("Q",function(e,t){t[Ei]=3*(v(e)-1)}),G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),V("w",pi),V("ww",pi,li),V("W",pi),V("WW",pi,li),K(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=v(e)});var rr={dow:0,doy:6};G("D",["DD",2],"Do","date"),P("date","D"),V("D",pi),V("DD",pi,li),V("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),J(["D","DD"],Ni),J("Do",function(e,t){t[Ni]=v(e.match(pi)[0],10)});var or=H("Date",!0);G("d",0,"do","day"),G("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),G("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),G("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),V("d",pi),V("e",pi),V("E",pi),V("dd",Ti),V("ddd",Ti),V("dddd",Ti),K(["dd","ddd","dddd"],function(e,t,n,i){var r=n._locale.weekdaysParse(e,i,n._strict);null!=r?t.d=r:c(n).invalidWeekday=e}),K(["d","e","E"],function(e,t,n,i){t[i]=v(e)});var sr="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ar="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ur="Su_Mo_Tu_We_Th_Fr_Sa".split("_");G("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),V("DDD",vi),V("DDDD",di),J(["DDD","DDDD"],function(e,t,n){n._dayOfYear=v(e)}),G("H",["HH",2],0,"hour"),G("h",["hh",2],0,cn),G("hmm",0,0,function(){return""+cn.apply(this)+F(this.minutes(),2)}),G("hmmss",0,0,function(){return""+cn.apply(this)+F(this.minutes(),2)+F(this.seconds(),2)}),G("Hmm",0,0,function(){return""+this.hours()+F(this.minutes(),2)}),G("Hmmss",0,0,function(){return""+this.hours()+F(this.minutes(),2)+F(this.seconds(),2)}),ln("a",!0),ln("A",!1),P("hour","h"),V("a",dn),V("A",dn),V("H",pi),V("h",pi),V("HH",pi,li),V("hh",pi,li),V("hmm",mi),V("hmmss",gi),V("Hmm",mi),V("Hmmss",gi),J(["H","HH"],Oi),J(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),J(["h","hh"],function(e,t,n){t[Oi]=v(e),c(n).bigHour=!0}),J("hmm",function(e,t,n){var i=e.length-2;t[Oi]=v(e.substr(0,i)),t[Ai]=v(e.substr(i)),c(n).bigHour=!0}),J("hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Oi]=v(e.substr(0,i)),t[Ai]=v(e.substr(i,2)),t[qi]=v(e.substr(r)),c(n).bigHour=!0}),J("Hmm",function(e,t,n){var i=e.length-2;t[Oi]=v(e.substr(0,i)),t[Ai]=v(e.substr(i))}),J("Hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Oi]=v(e.substr(0,i)),t[Ai]=v(e.substr(i,2)),t[qi]=v(e.substr(r))});var cr=/[ap]\.?m?\.?/i,lr=H("Hours",!0);G("m",["mm",2],0,"minute"),P("minute","m"),V("m",pi),V("mm",pi,li),J(["m","mm"],Ai);var dr=H("Minutes",!1);G("s",["ss",2],0,"second"),P("second","s"),V("s",pi),V("ss",pi,li),J(["s","ss"],qi);var fr=H("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),G(0,["SSS",3],0,"millisecond"),G(0,["SSSS",4],0,function(){return 10*this.millisecond()}),G(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),G(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),G(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),G(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),G(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),V("S",vi,ci),V("SS",vi,li),V("SSS",vi,di);var hr;for(hr="SSSS";hr.length<=9;hr+="S")V(hr,bi);for(hr="S";hr.length<=9;hr+="S")J(hr,pn);var pr=H("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var mr=p.prototype;mr.add=tr,mr.calendar=ct,mr.clone=lt,mr.diff=vt,mr.endOf=Et,mr.format=wt,mr.from=_t,mr.fromNow=St,mr.to=kt,mr.toNow=Tt,mr.get=I,mr.invalidAt=Ht,mr.isAfter=dt,mr.isBefore=ft,mr.isBetween=ht,mr.isSame=pt,mr.isSameOrAfter=mt,mr.isSameOrBefore=gt,mr.isValid=Lt,mr.lang=ir,mr.locale=Ct,mr.localeData=Dt,mr.max=Xi,mr.min=Qi,mr.parsingFlags=Yt,mr.set=I,mr.startOf=Mt,mr.subtract=nr,mr.toArray=qt,mr.toObject=jt,mr.toDate=At,mr.toISOString=bt,mr.toJSON=Pt,mr.toString=xt,mr.unix=Ot,mr.valueOf=Nt,mr.creationData=Wt,mr.year=Vi,mr.isLeapYear=ye,mr.weekYear=It,mr.isoWeekYear=Ft,mr.quarter=mr.quarters=$t,mr.month=se,mr.daysInMonth=ae,mr.week=mr.weeks=Zt,mr.isoWeek=mr.isoWeeks=Jt,mr.weeksInYear=Ut,mr.isoWeeksInYear=Gt,mr.date=or,mr.day=mr.days=on,mr.weekday=sn,mr.isoWeekday=an,mr.dayOfYear=un,mr.hour=mr.hours=lr,mr.minute=mr.minutes=dr,mr.second=mr.seconds=fr,mr.millisecond=mr.milliseconds=pr,mr.utcOffset=Be,mr.utc=$e,mr.local=Ve,mr.parseZone=Qe,mr.hasAlignedHourOffset=Xe,mr.isDST=Ze,mr.isDSTShifted=Je,mr.isLocal=Ke,mr.isUtcOffset=et,mr.isUtc=tt,mr.isUTC=tt,mr.zoneAbbr=mn,mr.zoneName=gn,mr.dates=b("dates accessor is deprecated. Use date instead.",or),mr.months=b("months accessor is deprecated. Use month instead",se),mr.years=b("years accessor is deprecated. Use year instead",Vi),mr.zone=b("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",ze);var gr=mr,vr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},yr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},xr="Invalid date",br="%d",wr=/\d{1,2}/,_r={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Sr=C.prototype;Sr._calendar=vr,Sr.calendar=xn,Sr._longDateFormat=yr,Sr.longDateFormat=bn,Sr._invalidDate=xr,Sr.invalidDate=wn,Sr._ordinal=br,Sr.ordinal=_n,Sr._ordinalParse=wr,Sr.preparse=Sn,Sr.postformat=Sn,Sr._relativeTime=_r,Sr.relativeTime=kn,Sr.pastFuture=Tn,Sr.set=k,Sr.months=ne,Sr._months=Hi,Sr.monthsShort=ie,Sr._monthsShort=Wi,Sr.monthsParse=re,Sr._monthsRegex=Ii,Sr.monthsRegex=ce,Sr._monthsShortRegex=Ri,Sr.monthsShortRegex=ue,Sr.week=Vt,Sr._week=rr,Sr.firstDayOfYear=Xt,Sr.firstDayOfWeek=Qt,Sr.weekdays=en,Sr._weekdays=sr,Sr.weekdaysMin=nn,Sr._weekdaysMin=ur,Sr.weekdaysShort=tn,Sr._weekdaysShort=ar,Sr.weekdaysParse=rn,Sr.isPM=fn,Sr._meridiemParse=cr,Sr.meridiem=hn,N("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===v(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.lang=b("moment.lang is deprecated. Use moment.locale instead.",N),e.langData=b("moment.langData is deprecated. Use moment.localeData instead.",q);var kr=Math.abs,Tr=Gn("ms"),Cr=Gn("s"),Dr=Gn("m"),Mr=Gn("h"),Er=Gn("d"),Nr=Gn("w"),Or=Gn("M"),Ar=Gn("y"),qr=Bn("milliseconds"),jr=Bn("seconds"),Pr=Bn("minutes"),Lr=Bn("hours"),Yr=Bn("days"),Hr=Bn("months"),Wr=Bn("years"),Rr=Math.round,Ir={s:45,m:45,h:22,d:26,M:11},Fr=Math.abs,Gr=We.prototype;Gr.abs=qn,Gr.add=Pn,Gr.subtract=Ln,Gr.as=In,Gr.asMilliseconds=Tr,Gr.asSeconds=Cr,Gr.asMinutes=Dr,Gr.asHours=Mr,Gr.asDays=Er,Gr.asWeeks=Nr,Gr.asMonths=Or,Gr.asYears=Ar,Gr.valueOf=Fn,Gr._bubble=Hn,Gr.get=Un,Gr.milliseconds=qr,Gr.seconds=jr,Gr.minutes=Pr,Gr.hours=Lr,Gr.days=Yr,Gr.weeks=zn,Gr.months=Hr,Gr.years=Wr,Gr.humanize=Xn,Gr.toISOString=Zn,Gr.toString=Zn,Gr.toJSON=Zn,Gr.locale=Ct,Gr.localeData=Dt,Gr.toIsoString=b("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Zn),Gr.lang=ir,G("X",0,0,"unix"),G("x",0,0,"valueOf"),V("x",wi),V("X",ki),J("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),J("x",function(e,t,n){n._d=new Date(v(e))}),e.version="2.12.0",t(Pe),e.fn=gr,e.min=Ye,e.max=He,e.now=Zi,e.utc=a,e.unix=vn,e.months=Mn,e.isDate=i,e.locale=N,e.invalid=d,e.duration=nt,e.isMoment=m,e.weekdays=Nn,e.parseZone=yn,e.localeData=q,e.isDuration=Re,e.monthsShort=En,e.weekdaysMin=An,e.defineLocale=O,e.updateLocale=A,e.locales=j,e.weekdaysShort=On,e.normalizeUnits=L,e.relativeTimeThreshold=Qn,e.prototype=gr;var Ur=e;return Ur}),define("logging",["moment"],function(e){"use strict";var t={},n=0,i=["ERROR","WARNING","DEBUG","INFO"];return function(r,o){return void 0!==o&&(o=!0),{log:function(s,a){if(void 0===a&&(a=3),!(r in t)&&n>=a){var u=e().format("MM/DD/YY HH:MM");o&&(u+=" "+i[a]),u+=" "+s+"\n",console.log(u)}},filter:function(e){if(void 0!==e.module)for(var i in e.module)e.module[i]?t[i]=!0:delete t[i];void 0!==e.level&&(n=e.level)},ERROR:0,WARNING:1,DEBUG:2,INFO:3}}}),define("game",["client2Server","logging"],function(e,t){"use strict";var n="wss://wishbanana.herokuapp.com";t=t("Server");var i=t.log;return function(r){var o=this,s=!0,a=0,u=new e(n),c=function(e){return e-a===1?(a=e,i("Game state changed: "+a),!0):(i("Invalid state change requested: "+a+" to "+e,t.WARNING),!1)};u.onClose=function(){s=!1},u.onConnected=function(){o.onConnected()},u.onWinCount=function(e){o.onWinCount(e)},u.onNamePlease=function(){c(1)&&u.name(r)},u.onMatched=function(e){c(2)&&o.onMatched(e)},u.onCountDown=function(e){2!==a&&i("Received countdown message during state "+a,t.WARNING),e>0?o.onCountDown(e):c(3)&&o.onPlaying()},u.onClickCount=function(e,t){o.count=e,o.onClickCount(e,t)},u.onGameOver=function(e){c(4)&&(o.onGameOver(e),o.quit())},this.click=function(){3===a&&(this.count++,u.click())},this.quit=function(){s&&(u.close(),s=!1,u.onClose=void 0,u.onConnected=void 0,u.onWinCount=void 0,u.onNamePlease=void 0,u.onMatched=void 0,u.onCountDown=void 0,u.onClickCount=void 0,u.onGameOver=void 0)},this.onConnected=void 0,this.onWinCount=void 0,this.onMatched=void 0,this.onCountDown=void 0,this.onPlaying=void 0,this.onClickCount=void 0,this.onGameOver=void 0,this.count=0}}),define("wishbanana",["jquery","imagesloaded","paging","animations","game","logging"],function(e,t,n,i,r,o){"use strict";o=o("wishbanana");o.log;e(function(){var t=n(e("body > div.page"));e("img").imagesLoaded().always(function(){t.switchToPage("menu")}),e("button#menuToStory").click(function(){t.switchToPage("story")}),e("button#menuToGame").click(function(){t.switchToPage("game")}),e("button#openHelp").click(function(t){t.stopPropagation(),e("#helpModal, #menu > #tint").show(),e(document).one("click",function(){e("#helpModal, #menu > #tint").hide()})}),e("button#storyToMenu").click(function(){t.switchToPage("menu")});var o=1,s=n(e("div#game").find("div.state")),a=(n(e("div#counting").find("div.count")),null),u=function(e){i.updateYourProgress(e/o)},c=function(e){i.updateTheirProgress(e/o)},l=function(){a.click(),i.flash(),u(a.count)},d=function(t){a=new r(t),a.onConnected=function(){e("#matching > h2").html("matching...")},a.onWinCount=function(e){o=e,1>o&&(o=1)},a.onMatched=function(t){e(".theirName").html(t),s.switchToPage("counting")},a.onCountDown=function(t){e("#count > h1").html(t)},a.onPlaying=function(){s.switchToPage("playing",!0)},a.onClickCount=function(e,t){u(e),c(t)},a.onGameOver=function(t){i.gameOver(t,function(){t?e("#youWin").show():e("#youLose").show(),e("#gameOverBanner").fadeIn()}),e(document).off("mousedown",l)}};t.addBeforeShowCallback("game",function(){s.switchToPage("naming")}),t.attachChildPaging("game",s),s.addAfterShowCallback("naming",function(){e("input#name").focus()}),s.addBeforeShowCallback("matching",function(){e("#matching > h2").html("connecting...")}),s.addBeforeShowCallback("counting",function(){e("#count > h1").html("")}),s.addBeforeShowCallback("playing",function(){
e(document).on("mousedown",l),e("#youWin").hide(),e("#youLose").hide(),e("#gameOverBanner").hide(),i.reset(),i.attachResizeHandler()}),s.addBeforeHideCallback("playing",function(){e(document).off("mousedown",l),i.detachResizeHandler(),null!==a&&(a.quit(),a=null)}),e("button#gameToMenu").click(function(e){t.switchToPage("menu"),e.stopPropagation()}),e("input#name").keydown(function(t){13==t.keyCode&&e("button#namingDone").click()}),e("button#namingDone").click(function(){var t=e("input#name").val();e(".yourName").html(t),d(t),s.switchToPage("matching")}),e("#playAgain").click(function(){s.switchToPage("naming")})})}),require(["wishbanana"]);
//# sourceMappingURL=wishbanana.build.js.map
//# sourceMappingURL=data:application/json;base64,
